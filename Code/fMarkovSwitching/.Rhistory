{
swi=object@switch
np=object["k"]*sum(swi)+sum(!swi)
return(2*object["Fit"]["logLikel"]+k*np)
}
AIC <-
## Return the object's value of the Bayesian Information Criterion
function(object, ...,k=2) UseMethod("AIC")
intervals.MSM.lm=function(object,level=0.95,...){
cat("\nAproximate intervals for the coefficients. Level=",level,"\n")
aux=names(object["Coef"])
lower=object["Coef"]-qnorm(1-(1-level)/2)*object["seCoef"]
upper=object["Coef"]+qnorm(1-(1-level)/2)*object["seCoef"]
a=apply(as.matrix(1:length(aux)),1,function(i){
cat(paste("\n",aux[i],": \n",sep=""))
#cat("---------\n")
intmat=cbind(lower[aux[i]],object["Coef"][aux[i]],upper[aux[i]])
dimnames(intmat)=list(c(paste("Regime ",1:object["k"],sep="")),c("Lower","Estimation","Upper"))
print(intmat)
#cat("---------\n")
cat("\n")
}
)
}
#########
#### msmfilter
.MSM.lm.msmFilter= function(object){
model=object["model"]
k=object["k"]
Coef=object["Coef"]
std=object["std"]
P=object["transMat"]
# Calculation of some preliminar variables
nr=length(model$model[,1])
terms=model.matrix(model)
CondMean=as.matrix(terms)%*%t(as.matrix(Coef))
error= as.matrix(model$model[,1,drop=F])%*%matrix(rep(1,k),nrow=1)-CondMean
Likel=t(dnorm(t(error),0,std))
###Filtered Probabilities ####
fProb=matrix(data=0,nrow=nr,ncol=k)
margLik=matrix(data=0,nrow=nr,ncol=1)
fProb[1,]= (P%*%matrix(object["iniProb"],ncol=1))*t(Likel[1,,drop=F])
margLik[1,1] = sum(fProb[1,])
fProb[1,] = fProb[1,] / margLik[1,1]
for (i in 2:nr){
# Mixtura de funcions
# MS filter equation
# MS filter Filter margLikuation for probabilities
fProb[i,] = (P%*%t(fProb[i-1,,drop=F]))*t(Likel[i,,drop=F])
margLik[i,1] = sum(fProb[i,])
fProb[i,] = fProb[i,]/margLik[i,1]
}
# Negative sum of log Likelihood
loglik=-sum(log(margLik[1:nr]))
# Passing up to output structure
ans=new(Class="MSM.fitted",CondMean=CondMean,error=error, Likel=Likel,margLik=margLik, filtProb=fProb, logLikel=loglik )
return(ans)
}
setMethod(f="msmFilter",signature=c("MSM.lm"),definition=.MSM.lm.msmFilter)
#########
#### msmsmooth
.MSM.msmSmooth=function(object){
object@Fit=msmFilter(object)
nr=length(object["model"]$model[,1])
fProb=object["Fit"]["filtProb"]
k=object["k"]
P=object["transMat"]
smoTransMatrob=matrix(0,ncol=k,nrow=nr+1)
smoTransMatrob[nr+1,]=fProb[nr,]
#smoTransMatrob[nr+1,]=fProb[nr,]%*%t(P)
proba=rbind(object@iniProb,fProb)
pro=proba%*%t(P)
smoTransMat=list(NULL)
for (i in (nr-1):0){
smoTransMat[[i+1]]=matrix(0,ncol=k,nrow=k)
for (ini in 1:k){
smoTransMatrob[i+1,ini]=0
for (fi in 1:k){
smoTransMat[[i+1]][ini,fi]=smoTransMatrob[i+2,fi]*proba[i+1,ini]*P[fi,ini]/pro[i+1,fi]
smoTransMatrob[i+1,ini]=smoTransMatrob[i+1,ini] + smoTransMat[[i+1]][ini,fi]
}
}
}
object@Fit@smoProb=smoTransMatrob
object@Fit@smoTransMat=smoTransMat
return(object)
}
setMethod(f="msmSmooth",signature=c("MSM.linear"),definition=.MSM.msmSmooth)
#########
####optimizer
fopt.lm=function(param, object=object){
if (tail(object["switch"],1)==F){
object@std<-exp(param[1])
ini=1
} else {
object@std<-exp(param[1:object["k"]])
ini=object["k"]
}
long=ini+(object["k"]-1)*object["k"]
mprob=matrix(logitinv(c(param[(ini+1):long])),nrow=object["k"],byrow=T)
object@transMat<-matrix(c(mprob,1-apply(mprob,1, function(x) sum(x))),nrow=object["k"],byrow=T)
swi=object["switch"][-length(object["switch"])]
mi=sum(!swi)
aux=object["Coef"]
aux[,which(swi)]=as.data.frame(matrix(param[-c(1:(long+mi))],nrow=object["k"],byrow=T))
aux[,which(!swi)]=as.data.frame(matrix(rep(param[long+(1:mi)],object["k"]),nrow=object["k"],byrow=T))
object@Coef=aux
return(msmFilter(object)@logLikel)
}
.MSM.lm.hessian=function(object){
if (tail(object["switch"],1)==F){
lstd=log(object["std"][1])
} else {
lstd=log(object["std"])
}
swi=object["switch"][-length(object["switch"])]
param=c(lstd,
logit(matrix(object["transMat"][1:object["k"]-1,],nrow=1,byrow=T)),
object["Coef"][1,!swi],
matrix(t(as.matrix(object["Coef"])[,swi]),nrow=1))
res=fdHess(
pars=param,
fun=fopt.lm,
object=object
)
long=object["k"]+(object["k"]-1)*object["k"]
mi=sum(!swi)
# Add by me
# use Ginv(), the generalized inversed for singular matrix, instead solve() to find inverse
# hessian=sqrt(abs(diag(solve(res$Hessian))))
require(matlib)
hessian=sqrt(abs(diag(Ginv(res$Hessian))))
stdaux=object["Coef"]
stdaux[,which(swi)]=as.data.frame(matrix(hessian[-c(1:(long+mi))],nrow=object["k"],byrow=T))
stdaux[,which(!swi)]=as.data.frame(matrix(rep(hessian[long+(1:mi)],object["k"]),nrow=object["k"],byrow=T))
object@seCoef=stdaux
return(object)
}
setMethod(f="hessian",signature=c("MSM.lm"),definition=.MSM.lm.hessian)
.MSM.lm.maximEM=function(object,dades){
k=object["k"]
swi=object["switch"][-length(object["switch"])]
co=object["Coef"]
w=object["Fit"]["smoProb"][-1,]
modaux=lm(y~.-1,dades,weights=c(t(w)))
object@Coef=as.data.frame(matrix(rep(coef(modaux),rep(ifelse(swi,1,k),ifelse(swi,k,1))),nrow=k))
if (tail(object["switch"],1)==T){
object@std=sqrt(apply(w*matrix(resid(modaux),ncol=k,byrow=T)^2,2,sum)/apply(w,2,sum))
} else {
std=sum(weighted.residuals(modaux)^2)/nrow(w)
object@std=rep(sqrt(std),k)
}
names(object@Coef)=names(co)
return(object)
}
setMethod(f="maximEM",signature=c("MSM.lm","data.frame"),definition=.MSM.lm.maximEM)
.MSM.linear.iteraEM=function(object,dades,control){
k=object["k"]
for (it in 1:control$maxiter){
oldcoef=object["Coef"]
oldll=object["Fit"]["logLikel"]
##M-step
object=maximEM(object,dades)
smoTransMatrob=object["Fit"]["smoProb"]
smoTransMat=object["Fit"]["smoTransMat"]
object@transMat=matrix(apply(matrix(unlist(smoTransMat),nrow=k*k),1,sum)/rep(apply(smoTransMatrob[-1,],2,sum),rep(k,k)),ncol=k)
object@iniProb=object["Fit"]["smoProb"][1,]
##E-step
object=msmSmooth(object)
if (control$trace) cat(" Inner Iter.",it," logLikel=",object["Fit"]["logLikel"],"\n")
if ((max(abs(object["Fit"]["logLikel"] - oldll))/(0.1 + max(abs(object["Fit"]["logLikel"]))) < control$tol)& (max(abs(object["Coef"] - oldcoef))/(0.1 + max(abs(object["Coef"]))) < control$tol)) break
}
return(object)
}
setMethod(f="iteraEM",signature=c("MSM.linear","data.frame","ANY"),definition=.MSM.linear.iteraEM)
####em
.MSM.em=function(object,control){
k=object["k"]
swi=object["switch"]
co=object["Coef"]
constX=function(el,swit){
if(swit){ mat=diag(1,k) }else{ mat=rep(1,k)}
kronecker(el,mat)
}
Xini=model.matrix(object["model"])
X=NULL
for(i in 1:ncol(Xini)){ X=cbind(X,constX(Xini[,i,drop=F],swi[i])) }
y=kronecker(as.matrix(object["model"]$model[,1,drop=F]),rep(1,k))
dades=data.frame(y=y,X)
mprob=object@transMat[-1,,drop=F]
object@transMat=matrix(c(1-apply(mprob,2, function(x) sum(x)),mprob),nrow=object["k"],byrow=T)
object@transMat[object@transMat<0]=0
object@transMat[object@transMat>1]=1
object=msmSmooth(object)
maxiterInner=control$maxiterInner
maxiterOuter=control$maxiterOuter
parallelization=control$parallelization
if(parallelization){
mc=detectCores(logical = TRUE)
cl <- makeCluster(mc)
#clusterExport(cl,c("dades","object","control","maxiterInner"))
}
paralel=function(id){
x<-object
smoTransMat=lapply(vector("list",nrow(x@Fit@filtProb)),function(el){
ma=runif(k*k)
matrix(ma/sum(ma),ncol=k)
})
smoTransMatrob=rbind(t(sapply(smoTransMat,function(el)apply(el,1,sum))),runif(k))
x@Fit@smoTransMat<-smoTransMat
x@Fit@smoProb=smoTransMatrob
x=iteraEM(x,dades,control=list(maxiter=maxiterInner,tol=control$tol,trace=control$trace,parallelization=control$parallelization))
return(list(Minim=x@Fit@logLikel,inismoTransMat=x@Fit@smoTransMat,inismoTransMatrob=x@Fit@smoProb))
}
if(parallelization){
junk <- clusterEvalQ(cl, library(MSwM))
paralRes=parLapply(cl, c(1:maxiterOuter),paralel)
stopCluster(cl)
} else {
paralRes=lapply(c(1:maxiterOuter),paralel)
}
Minim=paralRes[[1]][["Minim"]]
inismoTransMat=paralRes[[1]][["inismoTransMat"]]
inismoTransMatrob=paralRes[[1]][["inismoTransMatrob"]]
i=2
while(i<=maxiterOuter){
if(Minim>paralRes[[i]][["Minim"]]){
Minim=paralRes[[i]][["Minim"]]
inismoTransMat=paralRes[[i]][["inismoTransMat"]]
inismoTransMatrob=paralRes[[i]][["inismoTransMatrob"]]
}
i=i+1
}
if (control$trace) cat("Initial Value:",Minim,"\n")
object@Fit@smoTransMat=inismoTransMat
object@Fit@smoProb=inismoTransMatrob
object=iteraEM(object,dades,control)
if (control$trace) cat("Calculating standard errors...\n")
object=hessian(object)
return(object)
}
setMethod(f="em",signature=c("MSM.linear","list"),definition=.MSM.em)
library(MSwM)
load("~/Thesis/Data/all.RData")
library(MSwM)
library(MSwM)
train_num <- floor(nrow(g2_L16B_min) * 0.8)
train_g2_L16B_min <- g2_L16B_min[1:train_num,]
test_g2_L16B_min <- g2_L16B_min[-c(1:train_num),]
colnames(train_g2_L16B_min)[14] <- "TotCpu" # need to rename the variable
predictor <- c("RrcConnectionSetupComplete","Paging","X2HandoverRequest")
fmla <- as.formula(paste("TotCpu ~ ", paste(predictor, collapse= "+")))
mod <- lm(fmla, data=train_g2_L16B_min)
summary(mod)
set.seed(10)
model_mswm <- msmFit(mod, k=3, p=1, sw=c(TRUE,FALSE,TRUE,TRUE,TRUE,TRUE), control=list(trace=FALSE, maxiter=500, parallel=FALSE))
summary(model_mswm)
set.seed(10)
model_mswm <- msmFit(mod, k=3, p=1, sw=c(TRUE,FALSE,TRUE,TRUE,TRUE,TRUE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
summary(model_mswm)
set.seed(10)
model_mswm <- msmFit(mod, k=3, p=1, sw=c(TRUE,TRUE,TRUE,FALSE,TRUE,TRUE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
summary(model_mswm)
data(example)
write.csv(example, file="C:/Users/EARAEAM/Documents/Thesis/Data/example.csv")
library(MSwM)
data(example)
mod=lm(y~x,example)
mod.mswm=msmFit(mod,k=2,p=1,sw=c(T,T,T,F),control=list(trace=T,parallel=F))
set.seed(10)
model_mswm <- msmFit(mod, k=3, p=1, sw=c(TRUE,TRUE,TRUE,FALSE,TRUE,FALSE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
train_num <- floor(nrow(g2_L16B_min) * 0.8)
train_g2_L16B_min <- g2_L16B_min[1:train_num,]
test_g2_L16B_min <- g2_L16B_min[-c(1:train_num),]
colnames(train_g2_L16B_min)[14] <- "TotCpu" # need to rename the variable
predictor <- c("RrcConnectionSetupComplete","Paging","X2HandoverRequest")
fmla <- as.formula(paste("TotCpu ~ ", paste(predictor, collapse= "+")))
mod <- lm(fmla, data=train_g2_L16B_min)
summary(mod)
set.seed(10)
model_mswm <- msmFit(mod, k=3, p=1, sw=c(TRUE,TRUE,TRUE,FALSE,TRUE,FALSE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
summary(model_mswm)
set.seed(10)
model_mswm <- msmFit(mod, k=3, p=1, sw=c(TRUE,TRUE,TRUE,FALSE,TRUE,FALSE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
summary(model_mswm)
set.seed(10)
model_mswm <- msmFit(mod, k=3, p=1, sw=c(TRUE,TRUE,TRUE,FALSE,TRUE,FALSE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
set.seed(10)
model_mswm <- msmFit(mod, k=3, p=1, sw=c(TRUE,TRUE,TRUE,FALSE,TRUE,FALSE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
set.seed(10)
model_mswm <- msmFit(mod, k=3, p=1, sw=c(TRUE,FALSE,TRUE,TRUE,TRUE,FALSE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
summary(model_mswm)
set.seed(10)
model_mswm <- msmFit(mod, k=3, p=1, sw=c(TRUE,TRUE,TRUE,TRUE,TRUE,FALSE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
summary(model_mswm)
setwd("~/Thesis/Data")
e <- read.table("Example_FEX.txt")
dep <- e[1:100,1]
indep <- e[1:100,2:3]
View(indep)
dep <- as.data.frame(dep)
setwd("C:/Users/EARAEAM/Desktop/MT/Code/fMarkovSwitching")
setwd("C:/Users/EARAEAM/Desktop/MT/Code/fMarkovSwitching")
source(MS_Regress_Fit)
source(MS_Regress_Fit.R)
source("MS_Regress_Fit.R")
S=c(1,0,0)          # swiching in first indep variable (the intercept)
distrib<-"Normal"   # Assumed distribution for residue
k<-2
myModel<-MS_Regress_Fit(dep,indep,S,k,distrib)
indep <- e[1:100,2]
indep <- as.data.frame(e[1:100,2])
S=c(1,0,0)          # swiching in first indep variable (the intercept)
distrib<-"Normal"   # Assumed distribution for residue
k<-2
myModel<-MS_Regress_Fit(dep,indep,S,k,distrib)
print(myModel)
length(S)
ncol(indep)
indep <- as.data.frame(e[1:100,2:3])
ncol(indep)
S=c(1,0)          # swiching in first indep variable (the intercept)
distrib<-"Normal"   # Assumed distribution for residue
k<-2
myModel<-MS_Regress_Fit(dep,indep,S,k,distrib)
library(depmixS4)
myModel<-MS_Regress_Fit(dep,indep,S,k,distrib)
install.packages("Rdonlp2", repos="http://R-Forge.R-project.org")
y
install.packages("Rdonlp2", repos="http://R-Forge.R-project.org")
install.packages("Rdonlp2", repos="http://R-Forge.R-project.org")
install.packages("fMarkovSwitching", repos="http://R-Forge.R-project.org")
library(fMarkovSwitching)
?`fMarkovSwitching-package`
?fMarkovSwitching
?MS_Regress_Fit
data(dep)
data(indep)
View(indep)
S<-c(1,0,0)	# where to switch (in this case in the olny indep)
k<-2		# number of states
distIn<-"Normal"#distribution assumption
myModel<-MS_Regress_Fit(dep,indep,S,k)	# fitting the model
print(myModel)	# printing output
plot(myModel)	# plotting output
S<-c(1,1,1)	# where to switch (in this case in the olny indep)
k<-2		# number of states
distIn<-"Normal"#distribution assumption
S<-c(1,1,1)	# where to switch (in this case in the olny indep)
k<-2		# number of states
distIn<-"Normal"#distribution assumption
myModel<-MS_Regress_Fit(dep,indep,S,k)	# fitting the model
data(dep)
data(indep)
S<-c(1,1,1)	# where to switch (in this case in the olny indep)
k<-2		# number of states
distIn<-"Normal"#distribution assumption
myModel<-MS_Regress_Fit(dep,indep,S,k)	# fitting the model
View(indep)
View(indep)
print(myModel)	# printing output
S<-c(1,1,0)	# where to switch (in this case in the olny indep)
k<-2		# number of states
distIn<-"Normal"#distribution assumption
myModel<-MS_Regress_Fit(dep,indep,S,k)	# fitting the model
data(dep)
data(indep)
S<-c(1,1,0)	# where to switch (in this case in the olny indep)
k<-2		# number of states
distIn<-"Normal"#distribution assumption
myModel<-MS_Regress_Fit(dep,indep,S,k)	# fitting the model
print(myModel)	# printing output
dep=as.matrix(dep)
indep=as.matrix(indep)
data(dep)
data(dep)
dep=as.matrix(dep)
indep=as.matrix(indep)
S=c(1,0,0)
distrib<-"Normal"
k<-2
dep=dep[-nrow(dep)]
myNewIndep=indep[-nrow(indep),]
myModel<-MS_Regress_Fit(dep,myNewIndep,S,k,distrib)
newIndep_For=as.matrix(t(indep[nrow(indep),]))
myFor<-MS_Regress_For(myModel,newIndep_For)
cat("\nForecast for conditional Mean in t+1= ",myFor$condMean,"\n")
cat("Forecast for conditional Standard deviation (sigma) in t+1= ",myFor$condStd,"\n")
nPeriods=1  # only for 1 period ahead forecast (maybe implement later for n periods ahead)
newIndep<-as.matrix(newIndep)
newIndep_For=as.matrix(t(indep[nrow(indep),]))
newIndep<-as.matrix(newIndep)
newIndep_For=as.matrix(t(indep[nrow(indep),]))
as.matrix(t(indep[nrow(indep),]))
newIndep <- newIndep_For
newIndep<-as.matrix(newIndep)
myModel@sizeModel$n_nS
myModel@sizeModel$n_S
n_S   =myModel@sizeModel$n_S
n_nS  =myModel@sizeModel$n_nS
nIndep=myModel@sizeModel$nIndep
S     =myModel@sizeModel$S
k     =myModel@k
Coeff =myModel@Coeff
k
Coeff
nIndep
View(newIndep)
n_S
n_nS
newIndep_S<-matrix(data = 0 , nrow = 1, ncol = n_S )
newIndep_nS<-matrix(data = 0, nrow = 1, ncol = n_nS)
count_nS=0
count_S=0
View(newIndep_S)
print(MyModel)
print(myModel)
View(myNewIndep)
data(dep)
dep=as.matrix(dep)
indep=as.matrix(indep)
S=c(1,0,0,0)
distrib<-"Normal"
k<-2
dep=dep[-nrow(dep)]
myNewIndep=indep[-nrow(indep),]
myModel<-MS_Regress_Fit(dep,myNewIndep,S,k,distrib)
n_S
n_nS
nIndep
Coeff
nIndep
newIndep_S<-matrix(data = 0 , nrow = 1, ncol = n_S )
newIndep_nS<-matrix(data = 0, nrow = 1, ncol = n_nS)
View(newIndep_nS)
View(newIndep_S)
count_nS=0
count_S=0
for (i in 1:nIndep)
{
if (S[i]==1)
{
count_S<-count_S+1
newIndep_S[,count_S]<-newIndep[,i]
}
else
{
count_nS<-count_nS+1
newIndep_nS[,count_nS]<-newIndep[,i]
}
}
View(newIndep_S)
View(newIndep_nS)
S
S=c(1,0,0)
n_S   =myModel@sizeModel$n_S
n_nS  =myModel@sizeModel$n_nS
nIndep=myModel@sizeModel$nIndep
S     =myModel@sizeModel$S
k     =myModel@k
newIndep_S<-matrix(data = 0 , nrow = 1, ncol = n_S )
Coeff =myModel@Coeff
newIndep_nS<-matrix(data = 0, nrow = 1, ncol = n_nS)
count_nS=0
count_S=0
for (i in 1:nIndep)
{
if (S[i]==1)
{
count_S<-count_S+1
newIndep_S[,count_S]<-newIndep[,i]
}
else
{
count_nS<-count_nS+1
newIndep_nS[,count_nS]<-newIndep[,i]
}
}
myModel@sizeModel$nr
newFiltProb=myModel@Coeff$P%*%(myModel@filtProb[myModel@sizeModel$nr,]) # this is the filtered probabilities
newFiltProb
myModel
condMean<-matrix(0,nPeriods,k)  # conditional mean in all states
condMean
for (i in 1:nPeriods)
{
for (j in 1:k)
{
condMean[i,j]<-newIndep_nS%*%Coeff$indep_nS + newIndep_S%*%(Coeff$indep_S[,j])
}
}
condMean
dim(newIndep_nS)
dim(Coeff$indep_nS)
dim(newIndep_S)
dim(Coeff$indep_S[,j])
Coeff$indep_S[,1]
Coeff$indep_S
dim(Coeff$indep_S[,1])
Coeff$indep_nS
newIndep_nS%*%Coeff$indep_nS
str(newIndep_nS)
str(Coeff$indep_nS)
str(Coeff$indep_S)
str(newIndep_S)
str(Coeff)
str(Coeff$indep_nS)
class(Coeff)
class(Coeff$indep_S[,1])
str(Coeff$indep_S[,1])
str(Coeff$indep_S)
class(Coeff$indep_S)
