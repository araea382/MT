Ediv1_new_avg$estimates
# Ediv2_new_avg$k.hat # 3 clusters
# Ediv2_new_avg$estimates
plot(g2_L16B_new_avg$value, main="E-divisive g2_L16B_new_avg, alpha=1", type="l", xaxt="n")
abline(v=Ediv1_new_avg$estimates[c(-1,-length(Ediv1_new_avg$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_new_avg), labels=g2_L16B_new_avg$SW)
Ediv1_new_avg <- e.divisive(matrix(g2_L16B_new_avg$value), R=499, alpha=0.5)
Ediv1_new_avg$k.hat # 3 clusters
Ediv1_new_avg$estimates
# Ediv2_new_avg$k.hat # 3 clusters
plot(g2_L16B_new_avg$value, main="E-divisive g2_L16B_new_avg, alpha=1", type="l", xaxt="n")
abline(v=Ediv1_new_avg$estimates[c(-1,-length(Ediv1_new_avg$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_new_avg), labels=g2_L16B_new_avg$SW)
Ediv1_new_avg <- e.divisive(matrix(g2_L16B_new_avg$value), R=499, alpha=0.1)
# Ediv2_new_avg <- e.divisive(matrix(g2_L16B_new_avg$value), R=999, alpha=2)
Ediv1_new_avg$k.hat # 3 clusters
Ediv1_new_avg$estimates
plot(g2_L16B_new_avg$value, main="E-divisive g2_L16B_new_avg, alpha=1", type="l", xaxt="n")
abline(v=Ediv1_new_avg$estimates[c(-1,-length(Ediv1_new_avg$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_new_avg), labels=g2_L16B_new_avg$SW)
?e.divisive
Ediv1_new_avg$p.values
g2_L16B_new_min <- get_min(g2_L16B_new,"Normalize")
get_min <- function(data, y){
sw_name <- unique(data$SW)
subset <- lapply(sw_name, function(x) filter(data, SW == x))
sw_min <- unlist(lapply(1:length(subset), function(x) min(subset[x][[1]][,y])))
subset_min <- data.frame()
for(i in 1:length(sw_name)){
s <- filter(data, SW == sw_name[i] & `TotCpu%` == sw_min[i])
s <- s %>% distinct(SW, `TotCpu%`, .keep_all = TRUE) # in case there are duplicate rows
subset_min <- bind_rows(subset_min, s)
}
return(subset_min)
}
g2_L16B_new_min <- get_min(g2_L16B_new,"Normalize")
Ediv1_new_min <- e.divisive(matrix(g2_L16B_new_min$Normalize), R=499, alpha=1)
Ediv1_new_min$k.hat # 3 clusters
Ediv1_new_min$estimates
plot(g2_L16B_new_min$`TotCpu%`, main="E-divisive g2_L16B_new_min, alpha=1", type="l", xaxt="n", ylim=c(50,300))
g2_L16B_new_min <- get_min(g2_L16B_new,"Normalize")
View(g2_L16B_new_min)
View(g2_L16B_new)
g2_L16B_new_min <- get_min(g2_L16B_new, Normalize)
get_min <- function(data, y){
sw_name <- unique(data$SW)
subset <- lapply(sw_name, function(x) filter(data, SW == x))
sw_min <- unlist(lapply(1:length(subset), function(x) min(subset[x][[1]][,y])))
subset_min <- data.frame()
for(i in 1:length(sw_name)){
s <- filter(data, SW == sw_name[i] & y == sw_min[i])
s <- s %>% distinct(SW, y, .keep_all = TRUE) # in case there are duplicate rows
subset_min <- bind_rows(subset_min, s)
}
return(subset_min)
}
g2_L16B_new_min <- get_min(g2_L16B_new, Normalize)
g2_L16B_new_min <- get_min(g2_L16B_new, "Normalize")
as.list(match.call())
data <- g2_L16B_new,
data <- g2_L16B_new
y <- "Normalize"
sw_name <- unique(data$SW)
subset <- lapply(sw_name, function(x) filter(data, SW == x))
sw_min <- unlist(lapply(1:length(subset), function(x) min(subset[x][[1]][,y])))
subset_min <- data.frame()
i=1
paste(y)
s <- data %>% filter_(SW == sw_name[i] & paste(y) == sw_min[i])
data %>% filter_(SW == sw_name[i] & paste(y) == sw_min[i])
s <- filter(data, SW == sw_name[i] & paste(y) == sw_min[i])
s
i=1
sw_name[i]
sw_min[i]
data$SW == sw_name[i]
data$paste(y) == sw_min[i]
args <- as.list(match.call())
args
s <- data %>% filter(SW == sw_name[i] & eval(args$y) == sw_min[i])
eval(args$y)
y
s <- data %>% filter(eval(args$y) == sw_min[i])
install.packages("lazyeval")
library(lazyeval)
library(lazyeval)
install.packages("lazyeval")
install.packages("lazyeval")
library(lazyeval)
?interp
s <- data %>% filter_(SW == sw_name[i] & interp(x == sw_min[i], x=as.name(y)))
s <- data %>% filter_(SW == sw_name[i] & interp(x == sw_min[i], x=as.name(y)))
library(data.table)
library(gtools) # for sorting RW column
library(ecp)
library(cpm)
library(ggplot2)
library(dplyr)
library(depmixS4)
library(HiddenMarkov)
library(HMM)
s <- data %>% filter_(SW == sw_name[i] & interp(x == sw_min[i], x=as.name(y)))
s <- data %>% filter_(interp(x == sw_min[i], x=as.name(y)))
s <- data %>% filter_(interp(y == sw_min[i], y=as.name(y)))
s <- data %>% filter_(interp(var == sw_min[i], var=as.name(y)))
sw_min[1]
var <- as.name(y)
var
s <- data %>% filter_(SW == sw_name[i] & var == sw_min[i])
View(data)
s <- filter(data, SW == sw_name[i] & var == sw_min[i])
data$Normalize
s <- filter(data, SW == sw_name[i] )
View(s)
s <- filter(data, var == sw_min[i])
data %>% filter_(SW == sw_name[i])
data %>%
filter_(SW == sw_name[i])
data %>%
filter(SW == sw_name[i])
data %>% filter(SW == sw_name[i])
s <- data %>% filter(SW == sw_name[i] & var == sw_min[i])
s <- data %>% filter(SW == sw_name[i] & interp(var == sw_min[i], var=as.name(y)))
class(data$Normalize)
s <- data %>% filter(SW == sw_name[i] & paste(y) == sw_min[i])
View(s)
paste(y)
sw_name <- unique(data$SW)
subset <- lapply(sw_name, function(x) filter(data, SW == x))
sw_min <- unlist(lapply(1:length(subset), function(x) min(subset[x][[1]][,y])))
subset_min <- data.frame()
s <- data %>% filter(SW == sw_name[i] & paste(y) == sw_min[i])
s <- data %>% filter(paste(y) == sw_min[i])
s <- data %>% filter(SW == sw_name[i] )
s <- data %>% filter(SW == sw_name[i]) %>% filter_(paste(y) == sw_min[i])
filter_criteria <- interp(~y == x, .values=list(y=as.name(y), x=sw_min[i]))
filter_criteria
i=2
s <- data %>% filter(SW == sw_name[i])
View(s)
s %>% filter_(filter_criteria)
View(s)
filter_criteria
filter_criteria <- interp(~y == x, .values=list(y=as.name(y), x=sw_min[i]))
filter_criteria
s %>% filter_(filter_criteria)
s <- data %>% filter(SW == sw_name[i]) %>% filter_(filter_criteria)
View(s)
i=60
filter_criteria <- interp(~y == x, .values=list(y=as.name(y), x=sw_min[i]))
s <- data %>% filter(SW == sw_name[i]) %>% filter_(filter_criteria)
View(s)
i=80
filter_criteria <- interp(~y == x, .values=list(y=as.name(y), x=sw_min[i]))
s <- data %>% filter(SW == sw_name[i]) %>% filter_(filter_criteria)
View(s)
View(g2_L16B_new)
which(unique(data$SW) == "R13CN")
i=99
filter_criteria <- interp(~y == x, .values=list(y=as.name(y), x=sw_min[i]))
s <- data %>% filter(SW == sw_name[i]) %>% filter_(filter_criteria)
View(s)
s <- rbind(s,s)
View(s)
s <- s %>% distinct(SW, y, .keep_all = TRUE) # in case there are duplicate rows
t <- s %>% distinct(SW, .keep_all = TRUE) # in case there are duplicate rows
View(t)
s %>% distinct(SW, .keep_all = TRUE) %>% distinct(~var, var=as.name(y), .keep_all=TRUE)
s %>% distinct(SW, .keep_all = TRUE) %>% distinct(interp(~var, var=as.name(y), .keep_all=TRUE))
criteria <- interp(~var, var=as.name(y), .keep_all=TRUE)
criteria <- interp(~var, var=as.name(y))
criteria
s %>% distinct(SW, .keep_all = TRUE) %>% distinct(criteria, .keep_all=TRUE)
criteria <- interp(~var, var=as.name(y))
s %>% distinct(SW, .keep_all = TRUE) %>% distinct(criteria, .keep_all=TRUE)
criteria
filter_criteria
criteria <- interp(var, var=as.name(y))
s %>% distinct(SW, .keep_all = TRUE) %>% distinct(criteria, .keep_all=TRUE)
criteria
var <- as.name(y)
s %>% distinct(SW, .keep_all = TRUE) %>% distinct(var, .keep_all=TRUE)
s %>% distinct(var, .keep_all=TRUE)
s %>% distinct(paste(y), .keep_all=TRUE)
paste(y)
t <- s %>% distinct(SW, paste(y), .keep_all = TRUE)
View(t)
var <- paste(y)
t <- s %>% distinct(SW, var, .keep_all = TRUE)
filter_criteria <- interp(~y == x, .values=list(y=as.name(y), x=sw_min[i]))
s <- data %>% filter(SW == sw_name[i]) %>% filter_(filter_criteria)
s <- rbind(s,s)
t <- s %>% distinct(SW, paste(y), .keep_all = TRUE)
length(s)
if(nrow(s) > 1){ # in case there are duplicate rows
s <- s %>% distinct(SW, paste(y), .keep_all = TRUE)
s <- s[,-length(s)]
}
View(s)
filter_criteria <- interp(~y == x, .values=list(y=as.name(y), x=sw_min[i]))
s <- data %>% filter(SW == sw_name[i]) %>% filter_(filter_criteria)
if(nrow(s) > 1){ # in case there are duplicate rows
s <- s %>% distinct(SW, paste(y), .keep_all = TRUE)
s <- s[,-length(s)]
}
else{
subset_min <- bind_rows(subset_min, s)
}
filter_criteria <- interp(~y == x, .values=list(y=as.name(y), x=sw_min[i]))
s <- data %>% filter(SW == sw_name[i]) %>% filter_(filter_criteria)
if(nrow(s) > 1){ # in case there are duplicate rows
s <- s %>% distinct(SW, paste(y), .keep_all = TRUE)
s <- s[,-length(s)]
}
subset_min <- bind_rows(subset_min, s)
View(subset_min)
get_min <- function(data, y){
require("lazyeval")
sw_name <- unique(data$SW)
subset <- lapply(sw_name, function(x) filter(data, SW == x))
sw_min <- unlist(lapply(1:length(subset), function(x) min(subset[x][[1]][,y])))
subset_min <- data.frame()
for(i in 1:length(sw_name)){
filter_criteria <- interp(~y == x, .values=list(y=as.name(y), x=sw_min[i]))
s <- data %>% filter(SW == sw_name[i]) %>% filter_(filter_criteria)
if(nrow(s) > 1){ # in case there are duplicate rows
s <- s %>% distinct(SW, paste(y), .keep_all = TRUE)
s <- s[,-length(s)]
}
subset_min <- bind_rows(subset_min, s)
}
return(subset_min)
}
g2_L16B_new_min <- get_min(g2_L16B_new, "Normalize")
View(g2_L16B_new_min)
g2_L16B_new_min$Normalize
Ediv1_new_min <- e.divisive(matrix(g2_L16B_new_min$Normalize), R=499, alpha=1)
Ediv1_new_min$k.hat # 3 clusters
Ediv1_new_min$estimates
plot(g2_L16B_new_min$`TotCpu%`, main="E-divisive g2_L16B_new_min, alpha=1", type="l", xaxt="n", ylim=c(50,300))
plot(g2_L16B_new_min$Normalize, main="E-divisive g2_L16B_new_min, alpha=1", type="l", xaxt="n")
abline(v=Ediv1_new_min$estimates[c(-1,-length(Ediv1_new_min$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_new_min), labels=g2_L16B_new_min$SW)
Ediv1_new_min$estimates
plot(g2_L16B_new_avg$value, main="E-divisive g2_L16B_new_avg, alpha=1", type="l", xaxt="n")
View(g2_L16B_new_avg)
View(g2_L16B_new_min)
which(uniqe(g2_L16B$SW)=="R17JA")
which(unique(g2_L16B$SW)=="R17JA")
data <- g2_L16B
i=209
sw_name <- unique(data$SW)
subset <- lapply(sw_name, function(x) filter(data, SW == x))
sw_min <- unlist(lapply(1:length(subset), function(x) min(subset[x][[1]][,y])))
subset_min <- data.frame()
filter_criteria <- interp(~y == x, .values=list(y=as.name(y), x=sw_min[i]))
s <- data %>% filter(SW == sw_name[i]) %>% filter_(filter_criteria)
View(s)
subset[[209]]
mean(c(2.2961346, 0.8183814))
499.57/217
290.73/399
View(g2_L16B)
g2_L16B_avg <- get_average(g2_L16B,"TotCpu%")
Ediv1_avg <- e.divisive(matrix(g2_L16B_avg$value), R=499, alpha=1)
Ediv1_avg$k.hat
Ediv1_avg$estimates
plot(g2_L16B_avg$value, main="E-divisive g2_L16B_avg, alpha=1", type="l", xaxt="n", ylim=c(50,300))
abline(v=Ediv1_avg$estimates[c(-1,-length(Ediv1_avg$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_avg), labels=g2_L16B_avg$SW)
plot(g2_L16B_avg$value, main="E-divisive g2_L16B_avg, alpha=1", type="l", xaxt="n")
abline(v=Ediv1_avg$estimates[c(-1,-length(Ediv1_avg$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_avg), labels=g2_L16B_avg$SW)
g2_L16B_min <- get_min(g2_L16B,`TotCpu%`)
Ediv1_min <- e.divisive(matrix(g2_L16B_min$`TotCpu%`), R=499, alpha=1)
Ediv1_min$k.hat # 3 clusters
Ediv1_min$estimates
plot(g2_L16B_min$`TotCpu%`, main="E-divisive g2_L16B_min, alpha=1", type="l", xaxt="n", ylim=c(50,300))
abline(v=Ediv1_min$estimates[c(-1,-length(Ediv1_min$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_min), labels=g2_L16B_min$SW)
get_min <- function(data, y){
require("lazyeval")
sw_name <- unique(data$SW)
subset <- lapply(sw_name, function(x) filter(data, SW == x))
sw_min <- unlist(lapply(1:length(subset), function(x) min(subset[x][[1]][,y])))
subset_min <- data.frame()
for(i in 1:length(sw_name)){
filter_criteria <- interp(~y == x, .values=list(y=as.name(y), x=sw_min[i]))
s <- data %>% filter(SW == sw_name[i]) %>% filter_(filter_criteria)
if(nrow(s) > 1){ # in case there are duplicate rows
s <- s %>% distinct(SW, paste(y), .keep_all = TRUE)
s <- s[,-length(s)] # discard the generated new column
}
subset_min <- bind_rows(subset_min, s)
}
return(subset_min)
}
g2_L16B_min <- get_min(g2_L16B,`TotCpu%`)
Ediv1_min <- e.divisive(matrix(g2_L16B_min$`TotCpu%`), R=499, alpha=1)
Ediv1_min$k.hat # 3 clusters
Ediv1_min$estimates
plot(g2_L16B_min$`TotCpu%`, main="E-divisive g2_L16B_min, alpha=1", type="l", xaxt="n", ylim=c(50,300))
abline(v=Ediv1_min$estimates[c(-1,-length(Ediv1_min$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_min), labels=g2_L16B_min$SW)
View(g2_L16B)
data <- g2_L16B
g2_L16B_filter_min <- get_min(g2_L16B_filter,"TotCpu%")
Ediv1_filter_min <- e.divisive(matrix(g2_L16B_filter_min$`TotCpu%`), R=499, alpha=1)
Ediv1_filter_min$k.hat # 3 clusters
Ediv1_filter_min$estimates
plot(g2_L16B_filter_min$`TotCpu%`, main="E-divisive g2_L16B_filter_min, alpha=1", type="l", xaxt="n", ylim=c(50,300))
abline(v=Ediv1_filter_min$estimates[c(-1,-length(Ediv1_filter_min$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_filter_min), labels=g2_L16B_filter_min$SW)
g2_L16B_min <- get_min(g2_L16B,"TotCpu%")
Ediv1_min <- e.divisive(matrix(g2_L16B_min$`TotCpu%`), R=499, alpha=1)
Ediv1_min$k.hat # 3 clusters
Ediv1_min$estimates
plot(g2_L16B_min$`TotCpu%`, main="E-divisive g2_L16B_min, alpha=1", type="l", xaxt="n", ylim=c(50,300))
plot(g2_L16B_min$`TotCpu%`, main="E-divisive g2_L16B_min, alpha=1", type="l", xaxt="n")
abline(v=Ediv1_min$estimates[c(-1,-length(Ediv1_min$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_min), labels=g2_L16B_min$SW)
View(g2_L16B)
View(g2_L16B_filter)
plot(g2_L16B_new_min$Normalize, main="E-divisive g2_L16B_new_min, alpha=1", type="l", xaxt="n")
abline(v=Ediv1_new_min$estimates[c(-1,-length(Ediv1_new_min$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_new_min), labels=g2_L16B_new_min$SW)
Ediv1_new_min$estimates
plot(g2_L16B_new_min$Normalize, main="E-divisive g2_L16B_new_min, alpha=1", type="l", xaxt="n")
abline(v=Ediv1_new_min$estimates[c(-1,-length(Ediv1_new_min$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_new_min), labels=g2_L16B_new_min$SW)
View(g2_L16B_new_min)
Ediv1_new_min <- e.divisive(matrix(g2_L16B_new_min$Normalize), R=499, alpha=0.1)
Ediv1_new_min$k.hat # 3 clusters
Ediv1_new_min$estimates
plot(g2_L16B_new_min$Normalize, main="E-divisive g2_L16B_new_min, alpha=1", type="l", xaxt="n")
abline(v=Ediv1_new_min$estimates[c(-1,-length(Ediv1_new_min$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_new_min), labels=g2_L16B_new_min$SW)
Ediv1_new_min$permutations
Ediv1_new_min$order.found
Ediv1_new_min$cluster
Ediv1_new_min$p.values
Ediv1_new_min$considered.last
?e.divisive
Ediv1_new_min <- e.divisive(matrix(g2_L16B_new_min$Normalize), R=499, min.size=10, alpha=0.1)
Ediv1_new_min$k.hat # 3 clusters
Ediv1_new_min$estimates
plot(g2_L16B_new_min$Normalize, main="E-divisive g2_L16B_new_min, alpha=1", type="l", xaxt="n")
abline(v=Ediv1_new_min$estimates[c(-1,-length(Ediv1_new_min$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_new_min), labels=g2_L16B_new_min$SW)
Ediv1_new_min <- e.divisive(matrix(g2_L16B_new_min$Normalize), R=499, min.size=100, alpha=0.1)
Ediv1_new_min$k.hat # 3 clusters
Ediv1_new_min$estimates
plot(g2_L16B_new_min$Normalize, main="E-divisive g2_L16B_new_min, alpha=1", type="l", xaxt="n")
abline(v=Ediv1_new_min$estimates[c(-1,-length(Ediv1_new_min$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_new_min), labels=g2_L16B_new_min$SW)
Ediv1_new_min <- e.divisive(matrix(g2_L16B_new_min$Normalize), R=499, min.size=5, alpha=0.1)
Ediv1_new_min$k.hat # 3 clusters
Ediv1_new_min$estimates
plot(g2_L16B_new_min$Normalize, main="E-divisive g2_L16B_new_min, alpha=1", type="l", xaxt="n")
abline(v=Ediv1_new_min$estimates[c(-1,-length(Ediv1_new_min$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_new_min), labels=g2_L16B_new_min$SW)
Ediv1_new_min <- e.divisive(matrix(g2_L16B_new_min$Normalize), R=499, alpha=0.1)
Ediv1_new_min$k.hat # 3 clusters
Ediv1_new_min$estimates
plot(g2_L16B_new_min$Normalize, main="E-divisive g2_L16B_new_min, alpha=1", type="l", xaxt="n")
abline(v=Ediv1_new_min$estimates[c(-1,-length(Ediv1_new_min$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_new_min), labels=g2_L16B_new_min$SW)
View(mean)
View(e.divisive)
View(e.split)
getAnywhere(e.divisive
)
getAnywhere(e.split)
LRR <- c (0.3362 , 0.2793 , 0.3742 , 0.4424 , 0.1238 , 0.3590 , 0.1655 , 0.3552 ,
0.1504 , 0.2983 , 0.3173 , 0.1428 , 0.1276 , 0.8824 , 0.3438 , 0.2642 , 0.1390 ,
0.3211 , 0.4235 , 0.2338 , 0.2983 , 0.2376 , 0.2452 , 0.3362 , 0.3400 , 0.3248 ,
0.3666 , 0.4766 , 0.7193 , 0.3135 , 0.1883 , 0.1466 , 0.3211 , 0.3779 , 0.2376 ,
0.1655 , 0.3173 , 0.0252 , 0.2528 , 0.3324 , 0.2528 , 0.2755 , 0.2945 , 0.1997 ,
0.2376 , 0.1807 , 0.6510 , 0.3552 , 0.1883 , 0.1655 , 0.2680 , 0.2642 , 0.2680 ,
0.1883 , 0.1997 , 0.1693 , 0.3362 , 0.2111 , 0.2755 , 0.2680 , 0.2680 , 0.2983 ,
0.1162 , 0.3476 , 0.3817 , 0.8331 , 0.3097 , 0.2376 , 0.0556 , 0.0707 , 0.1655 ,
0.1769 , 0.2111 , -0.0696 , 0.2149 , 0.0214 , 0.1238 , -0.7333 , -0.7409 ,
0.0366 , 0.0897 , 0.1769 , 0.0404 , 0.0935 , 0.1466 , 0.6169 , 0.1921 , 0.2300 ,
0.3476 , 0.1921 , 0.6055 , 0.0935 , 0.0518 , -0.0582 , -0.6423 , 0.4083 ,
-0.7864 , -0.8964 , -0.6120 , -0.7258 , -0.6347 , -0.7940 , -0.6120 , -0.6006 ,
-0.1986 , -0.6044 , -0.4754 , -0.6234 , -0.7030 , -0.5323 , 0.3097 , -0.8395 ,
-1.0064 , -0.8206 , -0.8851 , -0.0506 , -0.7409 , -0.7296 , -1.5526 , -0.1455)
output <- e.divisive(LRR, R=499, alpha=1)
output <- e.divisive(as.matrix(LRR), R=499, alpha=1)
output$k.hat
output$estimates
ts.plot(LRR)
abline(v=output$estimates[c(-1,-4)], col="red", lty=2)
accidents <- c(4, 5, 4, 1, 0, 4, 3, 4, 0, 6, 3, 3, 4, 0, 2, 6, 3, 3, 5,
4, 5, 3, 1, 4, 4, 1, 5, 5, 3, 4, 2, 5, 2, 2, 3, 4, 2, 1, 3, 2, 2, 1, 1,
1, 1, 3, 0, 0, 1, 0, 1, 1, 0, 0, 3, 1, 0, 3, 2, 2, 0, 1, 1, 1, 0, 1, 0,
1, 0, 0, 0, 2, 1, 0, 0, 0, 1, 1, 0, 2, 3, 3, 1, 1, 2, 1, 1, 1, 1, 2, 4,
2, 0, 0, 0, 1, 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1)
output <- e.divisive(as.matrix(accidents), R=499, alpha=1)
output$k.hat
output$estimates
abline(v=output$estimates[c(-1,-3)], col="red", lty=2)
ts.plot(LRR)
abline(v=output$estimates[c(-1,-3)], col="red", lty=2)
ts.plot(accidents)
abline(v=output$estimates[c(-1,-3)], col="red", lty=2)
output <- e.divisive(as.matrix(LRR), R=499, alpha=1)
output$k.hat
output$estimates
ts.plot(LRR)
abline(v=output$estimates[c(-1,-4)], col="red", lty=2)
data("DJIA")
data("ACGH")
acghData <- ACGH$data
plot(acghData)
plot(acghData, type="l")
View(acghData)
source("clustercompare.R")
output$estimates
lrr <- as.data.frame(LRR)
View(lrr)
library(BreakoutDetection)
?help(breakout)
?breakout
data(Scribe)
res = breakout(Scribe, min.size=24, method='multi', beta=.001, degree=1, plot=TRUE)
res$plot
plot(Scribe, type="l")
Ediv_scribe <- e.divisive(matrix(Scribe), R=499, alpha=1)
ts.plot(matrix(Scribe))
abline(v=Ediv_scribe$estimates, col="red", lty=2)
abline(v=Ediv_scribe$estimates[c(-1,-4)], col="red", lty=2)
ts.plot(matrix(Scribe))
abline(v=Ediv_scribe$estimates[c(-1,-4)], col="red", lty=2)
setwd("C:/Users/EARAEAM/Downloads")
data <- read.csv("C:/Users/EARAEAM/Downloads/NCHSData.csv")
res = breakout(data$Percent.of.Deaths.Due.to.P.I, min.size=4, method='multi', percent=0.02, degree=1, plot=TRUE)
res$plot
stuff<-res$plot
data$wkyr<-paste(data$Week, data$Year, sep="-")
sub1<- data[seq(1, nrow(data), by=10), ]
wkyr2<-sub1$wkyr
library(ggplot2)
stuff + labs(y="Percent of All Deaths Due to \nPneumonia and Influenza",
x="Week-Year") + scale_x_continuous(breaks = c(seq(from = 1, to = 261, by = 10)),
labels = wkyr2) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
stuff + labs(y="Percent of All Deaths Due to \nPneumonia and Influenza",
x="Week-Year") + scale_x_continuous(breaks = c(seq(from = 1, to = 261, by = 10)),
labels = wkyr2) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
length(breaks)
breaks = c(seq(from = 1, to = 261, by = 10))
length(breaks)
length(wkyr2)
res2 <- breakout(g2_L16B_new_min$Normalize, method="multi", plot=TRUE)
res2$plot
res2 <- breakout(g2_L16B_new_min$Normalize, method="multi", min.size=10, plot=TRUE)
res2$plot
res2 <- breakout(g2_L16B_new_min$Normalize, method="multi", min.size=5, plot=TRUE)
res2$plot
res2 <- breakout(g2_L16B_new_min$Normalize, method="multi", percent=0.1, plot=TRUE)
res2$plot
res2
res2 <- breakout(g2_L16B_new_min$Normalize, method="multi", plot=TRUE)
res2
plot(g2_L16B_new_min$Normalize, main="E-divisive g2_L16B_new_min, alpha=1", type="l", xaxt="n")
abline(v=Ediv1_new_min$estimates[c(-1,-length(Ediv1_new_min$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_new_min), labels=g2_L16B_new_min$SW)
Ediv1_new_min <- e.divisive(matrix(g2_L16B_new_min$Normalize), R=499, alpha=1)
Ediv1_new_min$k.hat # 3 clusters
Ediv1_new_min$estimates
plot(g2_L16B_new_min$Normalize, main="E-divisive g2_L16B_new_min, alpha=1", type="l", xaxt="n")
abline(v=Ediv1_new_min$estimates[c(-1,-length(Ediv1_new_min$estimates))], col="red", lty=2)
axis(1, at=1:nrow(g2_L16B_new_min), labels=g2_L16B_new_min$SW)
library(strucchange)
install.packages("strucchange")
library(strucchange)
?breakpoints
data("Nile")
plot(Nile)
Nile
fs.nile <- Fstats(Nile ~ 1)
plot(fs.nile)
fs.nile
fs <- breakpoints(g2_L16B_new_min$Normalize ~ 1)
fs
summary(fs)
install.packages("tsoutliers")
library(tsoutliers)
?tso
data("hicp")
tso(y = log(hicp[[1]]))
ts <- tso(g2_L16B_new_min$Normalize)
dat.ts <- ts(g2_L16B_new_min$Normalize, frequency=1)
dat.ts
ts <- tso(dat.ts)
outlier <- tso(dat.ts)
outlier
plot(outlier)
plot(g2_L16B_new_min$Normalize)
plot(g2_L16B_new_min$Normaliz, type="l")
fs <- breakpoints(g2_L16B_filter_min$Normalize ~ 1)
g2_L16B_filter_min$Normalize
fs <- breakpoints(g2_L16B_filter_min$`TotCpu%` ~ 1)
fs
plot(fs)
?breakpoints
lines(fs, breaks = 2)
dat.ts <- ts(g2_L16B_filter_min$`TotCpu%`, frequency=1)
outlier <- tso(dat.ts); outlier
plot(outlier)
setwd("C:/Users/EARAEAM/Desktop/MT/Code")
