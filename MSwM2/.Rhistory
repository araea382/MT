library(MSwM2)
library(MSwM2)
library(MSwM2)
data(example)
mod=lm(y~x,example)
summary(mod)
set.seed(12)
mod.mswm=msmFit(mod,k=2,p=1,sw=c(T,T,T,F),control=list(trace=T,parallel=F))
setwd("C:/Users/EARAEAM/Documents/Thesis/Data")
g2_L16B_min <- read.csv("g2_L16B_min.csv")
train_num <- floor(nrow(g2_L16B_min) * 0.8)
train_g2_L16B_min <- g2_L16B_min[1:train_num,]
test_g2_L16B_min <- g2_L16B_min[-c(1:train_num),]
colnames(train_g2_L16B_min)[14] <- "TotCpu" # need to rename the variable
predictor <- c("RrcConnectionSetupComplete","Paging","X2HandoverRequest")
fmla <- as.formula(paste("TotCpu ~ ", paste(predictor, collapse= "+")))
mod <- lm(fmla, data=train_g2_L16B_min)
summary(mod)
set.seed(12)
set.seed(12)
model.mswm <- msmFit(mod, k=3, p=1, sw=c(TRUE,TRUE,FALSE,TRUE,TRUE,TRUE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
summary(model.mswm)
library(MSwM2)
library(MSwM2)
setwd("C:/Users/EARAEAM/Documents/Thesis/Data")
g2_L16B_min <- read.csv("g2_L16B_min.csv")
train_num <- floor(nrow(g2_L16B_min) * 0.8)
train_g2_L16B_min <- g2_L16B_min[1:train_num,]
test_g2_L16B_min <- g2_L16B_min[-c(1:train_num),]
colnames(train_g2_L16B_min)[14] <- "TotCpu" # need to rename the variable
predictor <- c("RrcConnectionSetupComplete","Paging","X2HandoverRequest")
fmla <- as.formula(paste("TotCpu ~ ", paste(predictor, collapse= "+")))
predictor <- c("DuProdName","Fdd.Tdd","NumCells")
fmla <- as.formula(paste("TotCpu ~ ", paste(predictor, collapse= "+")))
mod <- lm(fmla, data=train_g2_L16B_min)
summary(mod)
g2_L16B_min$DuProdName <- as.factor(g2_L16B_min$DuProdName)
g2_L16B_min$Fdd.Tdd <- as.factor(g2_L16B_min$Fdd.Tdd)
g2_L16B_min$NumCells <- as.factor(g2_L16B_min$NumCells)
train_num <- floor(nrow(g2_L16B_min) * 0.8)
train_g2_L16B_min <- g2_L16B_min[1:train_num,]
test_g2_L16B_min <- g2_L16B_min[-c(1:train_num),]
colnames(train_g2_L16B_min)[14] <- "TotCpu" # need to rename the variable
g2_L16B_min <- read.csv("g2_L16B_min.csv")
colnames(g2_L16B_min)[14] <- "TotCpu" # need to rename the variable
g2_L16B_min$DuProdName <- as.factor(g2_L16B_min$DuProdName)
g2_L16B_min$Fdd.Tdd <- as.factor(g2_L16B_min$Fdd.Tdd)
g2_L16B_min$NumCells <- as.factor(g2_L16B_min$NumCells)
train_num <- floor(nrow(g2_L16B_min) * 0.8)
train_g2_L16B_min <- g2_L16B_min[1:train_num,]
test_g2_L16B_min <- g2_L16B_min[-c(1:train_num),]
predictor <- c("DuProdName","Fdd.Tdd","NumCells")
fmla <- as.formula(paste("TotCpu ~ ", paste(predictor, collapse= "+")))
mod <- lm(fmla, data=train_g2_L16B_min)
summary(mod)
set.seed(12)
predictor <- c("DuProdName","Fdd.Tdd","NumCells")
fmla <- as.formula(paste("TotCpu ~ ", paste(predictor, collapse= "+")))
mod <- lm(fmla, data=train_g2_L16B_min)
summary(mod)
mod$coefficients
length(mod$coefficients)
set.seed(12)
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,mod$coefficients + 2), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+2), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
k=3
p=1
k=3
p=1
sw=rep(T,length(mod$coefficients)+1+1)
control=list(trace = T,  maxiter = 100, tol = 1e-8, maxiterInner=10, maxiterOuter=5, parallelization=F)
object <- mod
data <- train_g2_L16B_min
if(!missing(data)){
if(is.list(data)){
if(class(data[[1]])=="call"){
call=data[[1]]
}else{
call=match.call()
}
}else{
call=match.call()
}
}else{
call=match.call()
}
if(missing(p)) p=0
if (missing(control)) control=list()
control  <- do.call(msmControl, control)
if(p>0){
var=object$model[,1]
Ar=apply(as.matrix(1:p),1,function(el){
length(var)=length(var)-el
var=c(rep(NA,el),var)
return(var)
}
)
colnames(Ar)=paste(names(object$model)[1],"_",1:p,sep="")
aux=paste(colnames(Ar),collapse="+")
object=update(formula=as.formula(paste("~.+",aux,sep="")),data=data.frame(object$model,Ar),object)
}
Coef=data.frame(matrix(NA,nrow=k,ncol=length(coef(object))))
std=rep(0,k)
Coef
coef(object)
i=1
Coef=data.frame(matrix(NA,nrow=k,ncol=length(coef(object))))
std=rep(0,k)
ind=sample(1:k,length(object$residuals),replace=T)
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
Coef[i,]=coef(mod1)
Coef
summary(mod1)
coef(mod1)
for(i in 1:k){
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
Coef[i,]=coef(mod1)
std[i]=summary(mod1)$sigma
}
std[i]=summary(mod1)$sigma
i=1
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
Coef[i,]=coef(mod1)
std[i]=summary(mod1)$sigma
i=2
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
Coef[i,]=coef(mod1)
std[i]=summary(mod1)$sigma
mod1$coefficients
?contrasts
View(train_g2_L16B_min)
ind
i=1
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
View(data1)
Coef[i,]=coef(mod1)
Coef
coef(mod1)
which(data1$NumCells == 9)
name(Coef)
names(Coef)
names(coef(object))
i=2
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
Coef[i,]=coef(mod1)
coef(mod1)
which(train_g2_L16B_min$NumCells == 9)
which(train_g2_L16B_min$NumCells == 4)
which(train_g2_L16B_min$NumCells == 12)
which(train_g2_L16B_min$NumCells == 18)
which(train_g2_L16B_min$NumCells == 6)
lm(y~x+z, data=example)
?update
object$terms
oldcon <- options(contrasts = c("contr.treatment", "contr.poly"))
oldcon
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl", "Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D9
summary(lm.D9)
summary(lm.D90 <- update(lm.D9, . ~ . - 1))
options(contrasts = c("contr.helmert", "contr.poly"))
update(lm.D9)
getCall(lm.D90)
options(oldcon)
name(mod1$coefficients)
names(mod1$coefficients)
coef(object)
name_coef <- names(coef(object))
names(Coef) <- name_coef
Coef
Coef=data.frame(matrix(NA,nrow=k,ncol=length(coef(object))))
names(Coef) <- name_coef
Coef
name_object <- names(coef(object))
name_mod1 <- names(coef(mod1))
i=2
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
name_mod1 <- names(coef(mod1))
name_mod1
sapply(1:length(name_object),function(x){
if(name_mod1[x] == name_object[x]){
print("Y")
}
})
sapply(1:length(name_object),function(x){
if(name_mod1[x] == name_object[x]){
Coef[1,x] <- coef(mod1)[x]
}
})
Coef
length(name_object)
sapply(1:length(name_mod1),function(x){
if(name_mod1[x] == name_object[x]){
Coef[1,x] <- coef(mod1)[x]
}
})
class(coef(mod1))
coef(mod1)
r<-coef(mod1)
names(r)
r["DuprodNameBB5216"]
r[NumCells12]
r["NumCells12"]
coef(mod1)["NumCells12"]
for(a in name_mod){
for(b in name_object){
if(a == b){
Coef[,a] <- coef(mod1)[a]
}
}
}
for(a in name_mod1){
for(b in name_object){
if(a == b){
Coef[,a] <- coef(mod1)[a]
}
}
}
Coef
for(i in 1:k){
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
for(a in names(coef(mod1))){
for(b in names(coef(object))){
if(a == b){
Coef[,a] <- coef(mod1)[a]
}
}
}
std[i]=summary(mod1)$sigma
}
Coef
for(i in 1:k){
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
for(a in names(coef(mod1))){
for(b in names(coef(object))){
if(a == b){
Coef[i,a] <- coef(mod1)[a]
}
}
}
std[i]=summary(mod1)$sigma
}
Coef
i=1
Coef=data.frame(matrix(NA,nrow=k,ncol=length(coef(object))))
i=1
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
for(a in names(coef(mod1))){
for(b in names(coef(object))){
if(a == b){
Coef[i,a] <- coef(mod1)[a]
}
}
}
std[i]=summary(mod1)$sigma
Coef
Coef=data.frame(matrix(NA,nrow=k,ncol=length(coef(object))))
names(Coef) <- names(coef(object))
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
for(a in names(coef(mod1))){
for(b in names(coef(object))){
if(a == b){
Coef[i,a] <- coef(mod1)[a]
}
}
}
Coef
i=2
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
for(a in names(coef(mod1))){
for(b in names(coef(object))){
if(a == b){
Coef[i,a] <- coef(mod1)[a]
}
}
}
Coef
i=3
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
for(a in names(coef(mod1))){
for(b in names(coef(object))){
if(a == b){
Coef[i,a] <- coef(mod1)[a]
}
}
}
Coef
i=1
data1=as.data.frame(object$model[ind==i,,drop=F])
which(data1$NumCells==4)
i=2
which(data1$NumCells==4)
data1=as.data.frame(object$model[ind==i,,drop=F])
which(data1$NumCells==4)
load("~/Thesis/Data/all.RData")
View(corr2)
View(corr3)
View(corr4)
which(corr4$name == "S1InitialUeMessage")
which(corr3$name == "S1InitialUeMessage")
View(corr3)
View(corr3)
cor(g2_L16B_min$S1InitialUeMessage, g2_L16B_min$RrcConnectionSetupComplete)
cor(g2_extract$S1InitialUeMessage, g2_extract$RrcConnectionSetupComplete)
setwd("~/Thesis/Data")
write.csv(g2_extract, file="g2_extract.csv")
library("MSwM2", lib.loc="~/R/win-library/3.3")
train_num <- floor(nrow(g2_L16B_min) * 0.8)
train_g2_L16B_min <- g2_L16B_min[1:train_num,]
test_g2_L16B_min <- g2_L16B_min[-c(1:train_num),]
colnames(train_g2_L16B_min)[14] <- "TotCpu" # need to rename the variable
predictor <- c("RrcConnectionSetupComplete","Paging","X2HandoverRequest","Srb1SetupReject")
fmla <- as.formula(paste("TotCpu ~ ", paste(predictor, collapse= "+")))
mod <- lm(fmla, data=train_g2_L16B_min)
summary(mod)
set.seed(10)
model_mswm <- msmFit(mod, k=3, p=1, sw=c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
set.seed(10)
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
set.seed(12)
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
summary(mode)
summary(mod)
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=rep(T,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=rep(T,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=rep(T,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=rep(T,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=rep(T,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=rep(T,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
library(MSwM2)
library(MSwM2)
setwd("~/Thesis/Data")
g2_L16B_min <- read.csv("g2_L16B_min.csv")
colnames(g2_L16B_min)[14] <- "TotCpu" # need to rename the variable
g2_L16B_min$DuProdName <- as.factor(g2_L16B_min$DuProdName)
g2_L16B_min$Fdd.Tdd <- as.factor(g2_L16B_min$Fdd.Tdd)
g2_L16B_min$NumCells <- as.factor(g2_L16B_min$NumCells)
train_num <- floor(nrow(g2_L16B_min) * 0.8)
train_g2_L16B_min <- g2_L16B_min[1:train_num,]
test_g2_L16B_min <- g2_L16B_min[-c(1:train_num),]
predictor <- c("RrcConnectionSetupComplete","Paging","X2HandoverRequest","Srb1SetupReject")
fmla <- as.formula(paste("TotCpu ~ ", paste(predictor, collapse= "+")))
mod <- lm(fmla, data=train_g2_L16B_min)
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=FALSE, maxiter=500, parallel=FALSE))
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=FALSE, maxiter=500, parallel=FALSE))
summary(model_mswm)
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
summary(model_mswm)
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
