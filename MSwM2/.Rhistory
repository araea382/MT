fProb <- rbind(fProb, fProb_new) # filtered prob of t+1 conditional on the info in t+1
margLik <- rbind(margLik, margLik_new)
st <- c(st, which.max(fProb_new))
}
names(st) <- seq(nrow(test))
return(st)
}
setMethod(f="predict",signature=c("MSM.lm","data.frame"),definition=.MSM.lm.predict)
library(nlme)
library(parallel)
library(matlib)
predictor <- c("RrcConnectionSetupComplete","Paging","X2HandoverRequest","DuProdName","Fdd.Tdd","NumCells")
fmla <- as.formula(paste("TotCpu ~ ", paste(predictor, collapse= "+")))
mod <- lm(fmla, data=train_g2_L16B)
k=3
p=1
sw=rep(T,length(mod$coefficients)+p+1)
control=list(trace = T,  maxiter = 500, tol = 1e-8, maxiterInner=10, maxiterOuter=5, parallelization=F)
data <- train_g2_L16B
object <- mod
if(!missing(data)){
if(is.list(data)){
if(class(data[[1]])=="call"){
call=data[[1]]
}else{
call=match.call()
}
}else{
call=match.call()
}
}else{
call=match.call()
}
if(missing(p)) p=0
if (missing(control)) control=list()
control  <- do.call(msmControl, control)
###
# Add: use reref() and update model
###
for(i in names(object$contrasts)){
object$model[,i] <- reref(object$model, i)
}
object <- update(object, data=data.frame(object$model))
if(p>0){
var=object$model[,1]
Ar=apply(as.matrix(1:p),1,function(el){
length(var)=length(var)-el
var=c(rep(NA,el),var)
return(var)
}
)
colnames(Ar)=paste(names(object$model)[1],"_",1:p,sep="")
aux=paste(colnames(Ar),collapse="+")
object=update(formula=as.formula(paste("~.+",aux,sep="")),data=data.frame(object$model,Ar),object)
}
Coef=data.frame(matrix(NA,nrow=k,ncol=length(coef(object))))
names(Coef)=names(coef(object))
std=rep(0,k)
####
# Add: no need to divide data
#      use the whole data to get the initial coefficients
####
for(i in 1:k){
mod1=update(object,formula=object$terms,data=object$model)
Coef[i,]=coef(mod1)
std[i]=summary(mod1)$sigma
}
ind = sample(1:k, length(object$residuals), replace = T)
transMat = t(matrix(table(ind, c(ind[-1], NA))/rep(table(ind[-length(ind)]), k), ncol = k))
ans=new(Class="MSM.lm",
call=as.call(call),
model=object,
k=k,
switch=sw,
p=p,
Coef=Coef,
std=std,
transMat=transMat,
iniProb= rep(1/k,k)
)
validMSM.linear(ans)
validMSM.lm(ans)
ans=em(ans,control)
x <- ans
which=2
if(missing(which)){
which=1:(x["k"]+1)
}else{
if(is.numeric(which)){
if(any(which > (x["k"]+1))|any(which < 1)) stop("You must to write numbers between 1 and 3.")
}else{
stop("You must write numbers.")
}
}
oldpar=par()
a=ceiling(x["k"]/3)
aux1=1:a
aux2=matrix(NA,nrow=x["k"],ncol=1)
aux2[,1]=apply(as.matrix(1:x["k"]),1,function(i){
if(any((aux1*3)==(i-1))){
T
}else{
F
}
}
)
aux2[1,1]=T
cont=1
if(any(which==1)){
for (i in 1:x["k"]){
if(aux2[i,1]){
if(i>1){
if(cont<length(aux1)){
par(omi=c(0.1,0.1,0.1,0.5))
par(mfrow=c(3,1))
cont=cont+1
}else{
par(omi=c(0.1,0.1,0.1,0.5))
par(mfrow=c(x["k"]-(a-1)*3,1))
}
}else{
if(x["k"]/3<1){
par(omi=c(0.1,0.1,0.1,0.5))
par(mfrow=c(2,1))
}else{
par(omi=c(0.1,0.1,0.1,0.5))
par(mfrow=c(3,1))
}
cont=cont+1
}
}
plot(x["Fit"]["filtProb"][,i],main=paste("Regime",i),ylim=c(0,1),xlab="",ylab="",type="h")
lines(x["Fit"]["smoProb"][-1,i],col=2)
par(las=3)
mtext("Smoothed Probabilities",side=2,line=2.5,col=2)
mtext("Filtered Probabilities",side=4,line=2.5)
}
}
if(any(which>1)){
aux=which[which>1]-1
z=x["model"]$model[1]
apply(as.matrix(1:length(aux)),1,function(i){
a=layout(matrix(c(1,1,1,2),ncol=1,nrow=4),TRUE)
y=x["Fit"]["smoProb"][-1,aux[i]]
par(omi=c(0.1,0.1,0.1,0.5))
par(las=1,yaxt="n")
plot(0,type="l",xlim=c(1,length(t(z))),ylim=c(min(z),max(z)),main=paste("Regime",aux[i]),xlab=paste(names(z),"vs. Smooth Probabilities"),ylab="")
val=cbind(which(diff(c(0,findInterval(y,0.5)))==1),which(diff(c(findInterval(y,0.5),0))==-1))
apply(val,1,function(el) rect(el[1],min(z),el[2],max(z),col="light grey",border=NA))
par(new=T,las=1,bty="o",yaxt="n")
plot(ts(z),col=1,ylim=c(min(z),max(z)),xlab="",ylab="")
par(las=3,yaxt="s")
mtext(names(z),side=2,line=2.5,col=1)
axis(side=4)
barplot(x["Fit"]["smoProb"][-1,aux[i]],ylim=c(0,1))
###
# Add: line
###
abline(h=0.5, col="red", lty="dashed")
}
)
}
par(mfrow=c(1,1))
return(invisible())
predictor2 <- c("RrcConnectionSetupComplete","Paging","X2HandoverRequest","Fdd.Tdd","NumCells")
fmla2 <- as.formula(paste("TotCpu ~ ", paste(predictor2, collapse= "+")))
mod_L16A <- lm(fmla2, data=train_g2_L16A)
sw=rep(T,length(mod_L16A$coefficients)+p+1)
data <- train_g2_L16A
object <- mod_L16A
if(!missing(data)){
if(is.list(data)){
if(class(data[[1]])=="call"){
call=data[[1]]
}else{
call=match.call()
}
}else{
call=match.call()
}
}else{
call=match.call()
}
if(missing(p)) p=0
if (missing(control)) control=list()
control  <- do.call(msmControl, control)
###
# Add: use reref() and update model
###
for(i in names(object$contrasts)){
object$model[,i] <- reref(object$model, i)
}
object <- update(object, data=data.frame(object$model))
if(p>0){
var=object$model[,1]
Ar=apply(as.matrix(1:p),1,function(el){
length(var)=length(var)-el
var=c(rep(NA,el),var)
return(var)
}
)
colnames(Ar)=paste(names(object$model)[1],"_",1:p,sep="")
aux=paste(colnames(Ar),collapse="+")
object=update(formula=as.formula(paste("~.+",aux,sep="")),data=data.frame(object$model,Ar),object)
}
Coef=data.frame(matrix(NA,nrow=k,ncol=length(coef(object))))
names(Coef)=names(coef(object))
std=rep(0,k)
####
# Add: no need to divide data
#      use the whole data to get the initial coefficients
####
for(i in 1:k){
mod1=update(object,formula=object$terms,data=object$model)
Coef[i,]=coef(mod1)
std[i]=summary(mod1)$sigma
}
ind = sample(1:k, length(object$residuals), replace = T)
transMat = t(matrix(table(ind, c(ind[-1], NA))/rep(table(ind[-length(ind)]), k), ncol = k))
ans=new(Class="MSM.lm",
call=as.call(call),
model=object,
k=k,
switch=sw,
p=p,
Coef=Coef,
std=std,
transMat=transMat,
iniProb= rep(1/k,k)
)
validMSM.linear(ans)
validMSM.lm(ans)
ans=em(ans,control)
x <- ans
which=2
if(any(which>1)){
aux=which[which>1]-1
z=x["model"]$model[1]
apply(as.matrix(1:length(aux)),1,function(i){
a=layout(matrix(c(1,1,1,2),ncol=1,nrow=4),TRUE)
y=x["Fit"]["smoProb"][-1,aux[i]]
par(omi=c(0.1,0.1,0.1,0.5))
par(las=1,yaxt="n")
plot(0,type="l",xlim=c(1,length(t(z))),ylim=c(min(z),max(z)),main=paste("Regime",aux[i]),xlab=paste(names(z),"vs. Smooth Probabilities"),ylab="")
val=cbind(which(diff(c(0,findInterval(y,0.5)))==1),which(diff(c(findInterval(y,0.5),0))==-1))
apply(val,1,function(el) rect(el[1],min(z),el[2],max(z),col="light grey",border=NA))
par(new=T,las=1,bty="o",yaxt="n")
plot(ts(z),col=1,ylim=c(min(z),max(z)),xlab="",ylab="")
par(las=3,yaxt="s")
mtext(names(z),side=2,line=2.5,col=1)
axis(side=4)
barplot(x["Fit"]["smoProb"][-1,aux[i]],ylim=c(0,1))
###
# Add: line
###
abline(h=0.5, col="red", lty="dashed")
}
)
}
library(MSwM2)
aux=which[which>1]-1
z=x["model"]$model[1]
i=1
a=layout(matrix(c(1,1,1,2),ncol=1,nrow=4),TRUE)
y=x["Fit"]["smoProb"][-1,aux[i]]
par(omi=c(0.1,0.1,0.1,0.5))
par(las=1,yaxt="n")
plot(0,type="l",xlim=c(1,length(t(z))),ylim=c(min(z),max(z)),main=paste("Regime",aux[i]),xlab=paste(names(z),"vs. Smooth Probabilities"),ylab="")
val=cbind(which(diff(c(0,findInterval(y,0.5)))==1),which(diff(c(findInterval(y,0.5),0))==-1))
apply(val,1,function(el) rect(el[1],min(z),el[2],max(z),col="light grey",border=NA))
val
par(new=T,las=1,bty="o",yaxt="n")
plot(ts(z),col=1,ylim=c(min(z),max(z)),xlab="",ylab="")
?rect
val[1]
abline(v=3,col="light grey")
par(new=T,las=1,bty="o",yaxt="n")
plot(ts(z),col=1,ylim=c(min(z),max(z)),xlab="",ylab="")
par(las=3,yaxt="s")
mtext(names(z),side=2,line=2.5,col=1)
axis(side=4)
barplot(x["Fit"]["smoProb"][-1,aux[i]],ylim=c(0,1))
abline(h=0.5, col="red", lty="dashed")
abline(v=3,col="grey")
min(z)
rect(val[1,1]-0.01,min(z),val[1,2]+0.01,max(z))
rect(val[1,1]-0.01,min(z),val[1,2]+0.01,max(z),col="light grey",border=NA)
a=layout(matrix(c(1,1,1,2),ncol=1,nrow=4),TRUE)
y=x["Fit"]["smoProb"][-1,aux[i]]
par(omi=c(0.1,0.1,0.1,0.5))
par(las=1,yaxt="n")
plot(0,type="l",xlim=c(1,length(t(z))),ylim=c(min(z),max(z)),main=paste("Regime",aux[i]),xlab=paste(names(z),"vs. Smooth Probabilities"),ylab="")
val=cbind(which(diff(c(0,findInterval(y,0.5)))==1),which(diff(c(findInterval(y,0.5),0))==-1))
apply(val,1,function(el) rect(el[1],min(z),el[2],max(z),col="light grey",border=NA))
rect(val[1,1]-0.01,min(z),val[1,2]+0.01,max(z),col="light grey",border=NA)
rect(val[1,1]-0.1,min(z),val[1,2]+0.1,max(z),col="light grey",border=NA)
par(new=T,las=1,bty="o",yaxt="n")
plot(ts(z),col=1,ylim=c(min(z),max(z)),xlab="",ylab="")
par(las=3,yaxt="s")
mtext(names(z),side=2,line=2.5,col=1)
axis(side=4)
barplot(x["Fit"]["smoProb"][-1,aux[i]],ylim=c(0,1))
aux=which[which>1]-1
z=x["model"]$model[1]
apply(as.matrix(1:length(aux)),1,function(i){
a=layout(matrix(c(1,1,1,2),ncol=1,nrow=4),TRUE)
y=x["Fit"]["smoProb"][-1,aux[i]]
par(omi=c(0.1,0.1,0.1,0.5))
par(las=1,yaxt="n")
plot(0,type="l",xlim=c(1,length(t(z))),ylim=c(min(z),max(z)),main=paste("Regime",aux[i]),xlab=paste(names(z),"vs. Smooth Probabilities"),ylab="")
val=cbind(which(diff(c(0,findInterval(y,0.5)))==1),which(diff(c(findInterval(y,0.5),0))==-1))
apply(val,1,function(el){
if(el[1]==el[2]){
rect(el[1]-0.1,min(z),el[2]+0.1,max(z),col="light grey",border=NA)
}else{
rect(el[1],min(z),el[2],max(z),col="light grey",border=NA)
}
})
par(new=T,las=1,bty="o",yaxt="n")
plot(ts(z),col=1,ylim=c(min(z),max(z)),xlab="",ylab="")
par(las=3,yaxt="s")
mtext(names(z),side=2,line=2.5,col=1)
axis(side=4)
barplot(x["Fit"]["smoProb"][-1,aux[i]],ylim=c(0,1))
###
# Add: line
###
abline(h=0.5, col="red", lty="dashed")
}
)
which=2
aux=which[which>1]-1
z=x["model"]$model[1]
apply(as.matrix(1:length(aux)),1,function(i){
a=layout(matrix(c(1,1,1,2),ncol=1,nrow=4),TRUE)
y=x["Fit"]["smoProb"][-1,aux[i]]
par(omi=c(0.1,0.1,0.1,0.5))
par(las=1,yaxt="n")
plot(0,type="l",xlim=c(1,length(t(z))),ylim=c(min(z),max(z)),main=paste("Regime",aux[i]),xlab=paste(names(z),"vs. Smooth Probabilities"),ylab="")
val=cbind(which(diff(c(0,findInterval(y,0.5)))==1),which(diff(c(findInterval(y,0.5),0))==-1))
apply(val,1,function(el){
if(el[1]==el[2]){
rect(el[1]-0.1,min(z),el[2]+0.1,max(z),col="light grey",border=NA)
}else{
rect(el[1],min(z),el[2],max(z),col="light grey",border=NA)
}
})
par(new=T,las=1,bty="o",yaxt="n")
plot(ts(z),col=1,ylim=c(min(z),max(z)),xlab="",ylab="")
par(las=3,yaxt="s")
mtext(names(z),side=2,line=2.5,col=1)
axis(side=4)
barplot(x["Fit"]["smoProb"][-1,aux[i]],ylim=c(0,1))
###
# Add: line
###
abline(h=0.5, col="red", lty="dashed")
}
)
which=3
which=3
aux=which[which>1]-1
z=x["model"]$model[1]
apply(as.matrix(1:length(aux)),1,function(i){
a=layout(matrix(c(1,1,1,2),ncol=1,nrow=4),TRUE)
y=x["Fit"]["smoProb"][-1,aux[i]]
par(omi=c(0.1,0.1,0.1,0.5))
par(las=1,yaxt="n")
plot(0,type="l",xlim=c(1,length(t(z))),ylim=c(min(z),max(z)),main=paste("Regime",aux[i]),xlab=paste(names(z),"vs. Smooth Probabilities"),ylab="")
val=cbind(which(diff(c(0,findInterval(y,0.5)))==1),which(diff(c(findInterval(y,0.5),0))==-1))
apply(val,1,function(el){
if(el[1]==el[2]){
rect(el[1]-0.1,min(z),el[2]+0.1,max(z),col="light grey",border=NA)
}else{
rect(el[1],min(z),el[2],max(z),col="light grey",border=NA)
}
})
par(new=T,las=1,bty="o",yaxt="n")
plot(ts(z),col=1,ylim=c(min(z),max(z)),xlab="",ylab="")
par(las=3,yaxt="s")
mtext(names(z),side=2,line=2.5,col=1)
axis(side=4)
barplot(x["Fit"]["smoProb"][-1,aux[i]],ylim=c(0,1))
###
# Add: line
###
abline(h=0.5, col="red", lty="dashed")
}
)
val
aux[1]
x["Fit"]["smoProb"][-1,2]
z=x["model"]$model[1]
apply(as.matrix(1:length(aux)),1,function(i){
a=layout(matrix(c(1,1,1,2),ncol=1,nrow=4),TRUE)
y=x["Fit"]["smoProb"][-1,aux[i]]
par(omi=c(0.1,0.1,0.1,0.5))
par(las=1,yaxt="n")
plot(0,type="l",xlim=c(1,length(t(z))),ylim=c(min(z),max(z)),main=paste("Regime",aux[i]),xlab=paste(names(z),"vs. Smooth Probabilities"),ylab="")
val=cbind(which(diff(c(0,findInterval(y,0.5)))==1),which(diff(c(findInterval(y,0.5),0))==-1))
apply(val,1,function(el){
rect(el[1],min(z),el[2],max(z),col="light grey",border=NA)
}
})
par(new=T,las=1,bty="o",yaxt="n")
plot(ts(z),col=1,ylim=c(min(z),max(z)),xlab="",ylab="")
par(las=3,yaxt="s")
mtext(names(z),side=2,line=2.5,col=1)
axis(side=4)
barplot(x["Fit"]["smoProb"][-1,aux[i]],ylim=c(0,1))
###
# Add: line
###
abline(h=0.5, col="red", lty="dashed")
}
)
aux=which[which>1]-1
z=x["model"]$model[1]
apply(as.matrix(1:length(aux)),1,function(i){
a=layout(matrix(c(1,1,1,2),ncol=1,nrow=4),TRUE)
y=x["Fit"]["smoProb"][-1,aux[i]]
par(omi=c(0.1,0.1,0.1,0.5))
par(las=1,yaxt="n")
plot(0,type="l",xlim=c(1,length(t(z))),ylim=c(min(z),max(z)),main=paste("Regime",aux[i]),xlab=paste(names(z),"vs. Smooth Probabilities"),ylab="")
val=cbind(which(diff(c(0,findInterval(y,0.5)))==1),which(diff(c(findInterval(y,0.5),0))==-1))
apply(val,1,function(el){
rect(el[1],min(z),el[2],max(z),col="light grey",border=NA)
}
})
par(new=T,las=1,bty="o",yaxt="n")
plot(ts(z),col=1,ylim=c(min(z),max(z)),xlab="",ylab="")
par(las=3,yaxt="s")
mtext(names(z),side=2,line=2.5,col=1)
axis(side=4)
barplot(x["Fit"]["smoProb"][-1,aux[i]],ylim=c(0,1))
###
# Add: line
###
abline(h=0.5, col="red", lty="dashed")
}
)
aux=which[which>1]-1
z=x["model"]$model[1]
apply(as.matrix(1:length(aux)),1,function(i){
a=layout(matrix(c(1,1,1,2),ncol=1,nrow=4),TRUE)
y=x["Fit"]["smoProb"][-1,aux[i]]
par(omi=c(0.1,0.1,0.1,0.5))
par(las=1,yaxt="n")
plot(0,type="l",xlim=c(1,length(t(z))),ylim=c(min(z),max(z)),main=paste("Regime",aux[i]),xlab=paste(names(z),"vs. Smooth Probabilities"),ylab="")
val=cbind(which(diff(c(0,findInterval(y,0.5)))==1),which(diff(c(findInterval(y,0.5),0))==-1))
apply(val,1,function(el){
rect(el[1],min(z),el[2],max(z),col="light grey",border=NA)
}
})
par(new=T,las=1,bty="o",yaxt="n")
plot(ts(z),col=1,ylim=c(min(z),max(z)),xlab="",ylab="")
par(las=3,yaxt="s")
mtext(names(z),side=2,line=2.5,col=1)
axis(side=4)
barplot(x["Fit"]["smoProb"][-1,aux[i]],ylim=c(0,1))
###
# Add: line
###
abline(h=0.5, col="red", lty="dashed")
}
)
aux=which[which>1]-1
z=x["model"]$model[1]
apply(as.matrix(1:length(aux)),1,function(i){
a=layout(matrix(c(1,1,1,2),ncol=1,nrow=4),TRUE)
y=x["Fit"]["smoProb"][-1,aux[i]]
par(omi=c(0.1,0.1,0.1,0.5))
par(las=1,yaxt="n")
plot(0,type="l",xlim=c(1,length(t(z))),ylim=c(min(z),max(z)),main=paste("Regime",aux[i]),xlab=paste(names(z),"vs. Smooth Probabilities"),ylab="")
val=cbind(which(diff(c(0,findInterval(y,0.5)))==1),which(diff(c(findInterval(y,0.5),0))==-1))
apply(val,1,function(el){
rect(el[1],min(z),el[2],max(z),col="light grey",border=NA)
}
par(new=T,las=1,bty="o",yaxt="n")
plot(ts(z),col=1,ylim=c(min(z),max(z)),xlab="",ylab="")
par(las=3,yaxt="s")
mtext(names(z),side=2,line=2.5,col=1)
axis(side=4)
barplot(x["Fit"]["smoProb"][-1,aux[i]],ylim=c(0,1))
###
# Add: line
###
abline(h=0.5, col="red", lty="dashed")
}
)
aux=which[which>1]-1
z=x["model"]$model[1]
apply(as.matrix(1:length(aux)),1,function(i){
a=layout(matrix(c(1,1,1,2),ncol=1,nrow=4),TRUE)
y=x["Fit"]["smoProb"][-1,aux[i]]
par(omi=c(0.1,0.1,0.1,0.5))
par(las=1,yaxt="n")
plot(0,type="l",xlim=c(1,length(t(z))),ylim=c(min(z),max(z)),main=paste("Regime",aux[i]),xlab=paste(names(z),"vs. Smooth Probabilities"),ylab="")
val=cbind(which(diff(c(0,findInterval(y,0.5)))==1),which(diff(c(findInterval(y,0.5),0))==-1))
apply(val,1,function(el) rect(el[1],min(z),el[2],max(z),col="light grey",border=NA))
par(new=T,las=1,bty="o",yaxt="n")
plot(ts(z),col=1,ylim=c(min(z),max(z)),xlab="",ylab="")
par(las=3,yaxt="s")
mtext(names(z),side=2,line=2.5,col=1)
axis(side=4)
barplot(x["Fit"]["smoProb"][-1,aux[i]],ylim=c(0,1))
###
# Add: line
###
abline(h=0.5, col="red", lty="dashed")
}
)
