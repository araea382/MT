}
Coef=data.frame(matrix(NA,nrow=k,ncol=length(coef(object))))
std=rep(0,k)
Coef
coef(object)
i=1
Coef=data.frame(matrix(NA,nrow=k,ncol=length(coef(object))))
std=rep(0,k)
ind=sample(1:k,length(object$residuals),replace=T)
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
Coef[i,]=coef(mod1)
Coef
summary(mod1)
coef(mod1)
for(i in 1:k){
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
Coef[i,]=coef(mod1)
std[i]=summary(mod1)$sigma
}
std[i]=summary(mod1)$sigma
i=1
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
Coef[i,]=coef(mod1)
std[i]=summary(mod1)$sigma
i=2
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
Coef[i,]=coef(mod1)
std[i]=summary(mod1)$sigma
mod1$coefficients
?contrasts
View(train_g2_L16B_min)
ind
i=1
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
View(data1)
Coef[i,]=coef(mod1)
Coef
coef(mod1)
which(data1$NumCells == 9)
name(Coef)
names(Coef)
names(coef(object))
i=2
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
Coef[i,]=coef(mod1)
coef(mod1)
which(train_g2_L16B_min$NumCells == 9)
which(train_g2_L16B_min$NumCells == 4)
which(train_g2_L16B_min$NumCells == 12)
which(train_g2_L16B_min$NumCells == 18)
which(train_g2_L16B_min$NumCells == 6)
lm(y~x+z, data=example)
?update
object$terms
oldcon <- options(contrasts = c("contr.treatment", "contr.poly"))
oldcon
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl", "Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
lm.D9
summary(lm.D9)
summary(lm.D90 <- update(lm.D9, . ~ . - 1))
options(contrasts = c("contr.helmert", "contr.poly"))
update(lm.D9)
getCall(lm.D90)
options(oldcon)
name(mod1$coefficients)
names(mod1$coefficients)
coef(object)
name_coef <- names(coef(object))
names(Coef) <- name_coef
Coef
Coef=data.frame(matrix(NA,nrow=k,ncol=length(coef(object))))
names(Coef) <- name_coef
Coef
name_object <- names(coef(object))
name_mod1 <- names(coef(mod1))
i=2
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
name_mod1 <- names(coef(mod1))
name_mod1
sapply(1:length(name_object),function(x){
if(name_mod1[x] == name_object[x]){
print("Y")
}
})
sapply(1:length(name_object),function(x){
if(name_mod1[x] == name_object[x]){
Coef[1,x] <- coef(mod1)[x]
}
})
Coef
length(name_object)
sapply(1:length(name_mod1),function(x){
if(name_mod1[x] == name_object[x]){
Coef[1,x] <- coef(mod1)[x]
}
})
class(coef(mod1))
coef(mod1)
r<-coef(mod1)
names(r)
r["DuprodNameBB5216"]
r[NumCells12]
r["NumCells12"]
coef(mod1)["NumCells12"]
for(a in name_mod){
for(b in name_object){
if(a == b){
Coef[,a] <- coef(mod1)[a]
}
}
}
for(a in name_mod1){
for(b in name_object){
if(a == b){
Coef[,a] <- coef(mod1)[a]
}
}
}
Coef
for(i in 1:k){
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
for(a in names(coef(mod1))){
for(b in names(coef(object))){
if(a == b){
Coef[,a] <- coef(mod1)[a]
}
}
}
std[i]=summary(mod1)$sigma
}
Coef
for(i in 1:k){
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
for(a in names(coef(mod1))){
for(b in names(coef(object))){
if(a == b){
Coef[i,a] <- coef(mod1)[a]
}
}
}
std[i]=summary(mod1)$sigma
}
Coef
i=1
Coef=data.frame(matrix(NA,nrow=k,ncol=length(coef(object))))
i=1
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
for(a in names(coef(mod1))){
for(b in names(coef(object))){
if(a == b){
Coef[i,a] <- coef(mod1)[a]
}
}
}
std[i]=summary(mod1)$sigma
Coef
Coef=data.frame(matrix(NA,nrow=k,ncol=length(coef(object))))
names(Coef) <- names(coef(object))
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
for(a in names(coef(mod1))){
for(b in names(coef(object))){
if(a == b){
Coef[i,a] <- coef(mod1)[a]
}
}
}
Coef
i=2
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
for(a in names(coef(mod1))){
for(b in names(coef(object))){
if(a == b){
Coef[i,a] <- coef(mod1)[a]
}
}
}
Coef
i=3
data1=as.data.frame(object$model[ind==i,,drop=F])
mod1=update(object,formula=object$terms,data=data1)
for(a in names(coef(mod1))){
for(b in names(coef(object))){
if(a == b){
Coef[i,a] <- coef(mod1)[a]
}
}
}
Coef
i=1
data1=as.data.frame(object$model[ind==i,,drop=F])
which(data1$NumCells==4)
i=2
which(data1$NumCells==4)
data1=as.data.frame(object$model[ind==i,,drop=F])
which(data1$NumCells==4)
load("~/Thesis/Data/all.RData")
View(corr2)
View(corr3)
View(corr4)
which(corr4$name == "S1InitialUeMessage")
which(corr3$name == "S1InitialUeMessage")
View(corr3)
View(corr3)
cor(g2_L16B_min$S1InitialUeMessage, g2_L16B_min$RrcConnectionSetupComplete)
cor(g2_extract$S1InitialUeMessage, g2_extract$RrcConnectionSetupComplete)
setwd("~/Thesis/Data")
write.csv(g2_extract, file="g2_extract.csv")
library("MSwM2", lib.loc="~/R/win-library/3.3")
train_num <- floor(nrow(g2_L16B_min) * 0.8)
train_g2_L16B_min <- g2_L16B_min[1:train_num,]
test_g2_L16B_min <- g2_L16B_min[-c(1:train_num),]
colnames(train_g2_L16B_min)[14] <- "TotCpu" # need to rename the variable
predictor <- c("RrcConnectionSetupComplete","Paging","X2HandoverRequest","Srb1SetupReject")
fmla <- as.formula(paste("TotCpu ~ ", paste(predictor, collapse= "+")))
mod <- lm(fmla, data=train_g2_L16B_min)
summary(mod)
set.seed(10)
model_mswm <- msmFit(mod, k=3, p=1, sw=c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
set.seed(10)
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
set.seed(12)
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
summary(mode)
summary(mod)
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=rep(T,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=rep(T,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=rep(T,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=rep(T,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=rep(T,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=rep(T,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
library(MSwM2)
library(MSwM2)
setwd("~/Thesis/Data")
g2_L16B_min <- read.csv("g2_L16B_min.csv")
colnames(g2_L16B_min)[14] <- "TotCpu" # need to rename the variable
g2_L16B_min$DuProdName <- as.factor(g2_L16B_min$DuProdName)
g2_L16B_min$Fdd.Tdd <- as.factor(g2_L16B_min$Fdd.Tdd)
g2_L16B_min$NumCells <- as.factor(g2_L16B_min$NumCells)
train_num <- floor(nrow(g2_L16B_min) * 0.8)
train_g2_L16B_min <- g2_L16B_min[1:train_num,]
test_g2_L16B_min <- g2_L16B_min[-c(1:train_num),]
predictor <- c("RrcConnectionSetupComplete","Paging","X2HandoverRequest","Srb1SetupReject")
fmla <- as.formula(paste("TotCpu ~ ", paste(predictor, collapse= "+")))
mod <- lm(fmla, data=train_g2_L16B_min)
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=FALSE, maxiter=500, parallel=FALSE))
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=FALSE, maxiter=500, parallel=FALSE))
summary(model_mswm)
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
summary(model_mswm)
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
model_mswm <- msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
library(MSwM2)
library(MSwM2)
library(MSwM2)
load("~/Dropbox/Thesis/Data/data.RData")
library(MSwM2)
predictor <- c("DuProdName","Fdd.Tdd","NumCells","RrcConnectionSetupComplete","Paging","X2HandoverRequest")
fmla <- as.formula(paste("TotCpu ~ ", paste(predictor, collapse= "+")))
mod <- lm(fmla, data=train_g2_L16B_min)
summary(mod)
set.seed(1)
model_mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
summary(model_mswm)
test_g2_L16B_min[1,]
predict(model_mswm, test_g2_L16B_min[1,])
class(model_mswm)
summary(model_mswm)
library(MSwM2)
predict(model_mswm, test_g2_L16B_min[1,])
?`summary,MSM.lm-method`
?setClass
?setMethod
class(model_mswm)
model_mswm
setGeneric("predict",function(object,newdata){standardGeneric("predict")})
library(MSwM2)
predict(model_mswm, test_g2_L16B_min[1,])
library(MSwM2)
predict(model_mswm, test_g2_L16B_min[1,])
isS4(predict)
isS4(summary)
showMethods(predict)
class(newdata)
class(test)
class(test_g2_L16B_min)
class(test_g2_L16B_min[1,])
library(MSwM2)
class(model_mswm)
class(test_g2_L16B_min[1,])
predict(model_mswm, test_g2_L16B_min[1,])
?setGeneric
rm(predict)
library(MSwM2)
predict(model_mswm, test_g2_L16B_min[1,])
?UseMethod
class(model_mswm)
library(MSwM2)
library(MSwM2)
prediction(model_mswm, test_g2_L16B_min[1,])
prediction(model_mswm, test_g2_L16B_min[1,])
library(MSwM2)
predict(model_mswm, test_g2_L16B_min[1,])
library(MSwM2)
predict(model_mswm, test_g2_L16B_min[1,])
newdata <- test_g2_L16B_min[1,]
predict(model_mswm, newdata)
object <- model_mswm
p <- object@p
model <- object["model"]
Coef <- object["Coef"]
std <- object["std"]
P <- object["transMat"]
fProb <- object["Fit"]["filtProb"]
margLik <- object["Fit"]["margLik"]
nr <- length(model$model[,1])
Coef
dim(Coef)
if(p > 0){
ar <- t(model$model[nr:(nr-p+1),1,drop=F]) # lag p
colnames(ar) <- paste(names(model$model)[1],"_",1:p,sep="") # insert name
}
var <- colnames(model$model) # all variables name
var <- var[1:(length(var)-p)] # discard AR term (if any)
test <- subset(newdata, select=var) # subset (dependent and independent variables)
test <- cbind(test, ar) # include back AR term
for(i in names(model$contrasts)){
test[,i] <- reref(test, i)
}
reref <- function(data, var){
count <- sapply(levels(data[,var]), function(x) length(which(data[,var] == x)))
ind <- which.max(count)
maxlev <- levels(data[,var])[ind]
return(relevel(data[,var], maxlev))
}
for(i in names(model$contrasts)){
test[,i] <- reref(test, i)
}
terms <- model.matrix(as.formula(paste(colnames(test)[1], " ~ ", paste(colnames(test)[-1], collapse= "+"))), data=test)
dim(as.matrix(terms) )
dim(t(as.matrix(Coef)))
terms
test
terms
str(test)
newdata
str(newdata)
str(test_g2_L16B_min)
View(test_g2_L16B_min)
unique(test_g2_L16B_min$NumCells)
unique(train_g2_L16B_min$NumCells)
str(g2_L16B)
str(g2_L16A)[1:10]
str(g2_L16B$NumCells)
unique(g2_L16B$NumCells)
which(g2_L16B == 10)
which(g2_L16B$NumCells == 10)
which(g2_L16B_min$NumCells == 10)
str(newdata)
as.matrix(terms)
t(as.matrix(Coef))
get_subset <- function(data, release, y){
data <- data[which(Release == release)]
data1 <- get_min(data, y)
# DuProdName, Fdd/Tdd, NumCells to factor
data1$DuProdName <- as.factor(data1$DuProdName)
data1$Fdd.Tdd <- as.factor(data1$Fdd.Tdd)
data1$NumCells <- as.factor(data1$NumCells)
# change SW from character to factor and set the factor levels to be the same as in factor labels
level <- unique(data1$SW)
data1$SW <- factor(data1$SW, levels=level)
return(data1)
}
g2_L16A <- get_subset(g2_extract, "L16A")
g2_L16A <- get_subset(g2_extract, "L16A", "TotCpu")
g2_extract[which(Release == "L17A")]
View(g2_extract)
colnames(g2_extract)
data <- g2_extract
release = "L16A"
data[which(Release == release)]
data[which(data$Release == release)]
train_g2_L16A_min[which(Release == "L16A")]
View(train_g2_L16A_min)
train_g2_L16A_min[which(NumCells == 12)]
which(train_g2_L16A_min$NumCells == 12)
train_g2_L16A_min[which(NumCells == 12),]
train_g2_L16A_min[which(train_g2_L16A_min$NumCells == 12),]
train_g2_L16A_min[which(train_g2_L16A_min$NumCells == 12)]
a=train_g2_L16A_min[which(train_g2_L16A_min$NumCells == 12)]
b+train_g2_L16A_min[which(train_g2_L16A_min$NumCells == 12),]
b=train_g2_L16A_min[which(train_g2_L16A_min$NumCells == 12),]
View(a)
View(b)
which(train_g2_L16A_min$NumCells == 12)
length(which(train_g2_L16A_min$NumCells == 12))
g2_extract[which(Release == "L16B")]
load("~/Dropbox/Thesis/Data/data.RData")
g2_extract[which(Release == "L16B")]
g2_extract[which(Release == "L16B")]
library(data.table)
data <- data[which(Release == release)]
View(data)
get_subset <- function(data, release, y){
data <- data[which(Release == release)]
data1 <- get_min(data, y)
# DuProdName, Fdd/Tdd, NumCells to factor
data1$DuProdName <- as.factor(data1$DuProdName)
data1$Fdd.Tdd <- as.factor(data1$Fdd.Tdd)
data1$NumCells <- as.factor(data1$NumCells)
# change SW from character to factor and set the factor levels to be the same as in factor labels
level <- unique(data1$SW)
data1$SW <- factor(data1$SW, levels=level)
return(data1)
}
g2_L16A <- get_subset(g2_extract, "L16A", "TotCpu")
library(gtools) # for sorting RW column
library(data.table)
library(gtools) # for sorting RW column
library(dplyr)
library(stringr)
library(ggplot2)
get_subset <- function(data, release, y){
data <- data[which(Release == release)]
data1 <- get_min(data, y)
# DuProdName, Fdd/Tdd, NumCells to factor
data1$DuProdName <- as.factor(data1$DuProdName)
data1$Fdd.Tdd <- as.factor(data1$Fdd.Tdd)
data1$NumCells <- as.factor(data1$NumCells)
# change SW from character to factor and set the factor levels to be the same as in factor labels
level <- unique(data1$SW)
data1$SW <- factor(data1$SW, levels=level)
return(data1)
}
g2_L16A <- get_subset(g2_extract, "L16A", "TotCpu")
View(g2_L16A)
View(g2_L16A_min)
g2_L16B <- get_subset(g2_extract, "L16B", "TotCpu")
g2_L17A <- get_subset(g2_extract, "L17A", "TotCpu")
g2_L17B <- get_subset(g2_extract, "L17B", "TotCpu")
get_subset <- function(data, release){
data <- data[which(Release == release)]
data1 <- get_min(data, "TotCpu")
# DuProdName, Fdd/Tdd, NumCells to factor
data1$DuProdName <- as.factor(data1$DuProdName)
data1$Fdd.Tdd <- as.factor(data1$Fdd.Tdd)
data1$NumCells <- as.factor(data1$NumCells)
# change SW from character to factor and set the factor levels to be the same as in factor labels
level <- unique(data1$SW)
data1$SW <- factor(data1$SW, levels=level)
return(data1)
}
g2_L17B <- get_subset(g2_extract, "L17B")
data <- g2_extract
release <- "L17B"
data <- data[which(Release == release)]
y <- "TotCpu"
sw_name <- unique(data$SW)
subset <- lapply(sw_name, function(x) dplyr::filter(data, SW == x))
sw_name
subset
sw_min <- unlist(lapply(1:length(subset), function(x) min(subset[x][[1]][,y])))
is.null(sw_name)
isTRUE(length(sw_name) > 1)
if(isTRUE(length(sw_name) <1))
}
isTRUE(length(sw_name) <1)
?stop
get_min <- function(data, y){
require("lazyeval")
sw_name <- unique(data$SW)
if(isTRUE(length(sw_name) <1)){stop("No value")}
subset <- lapply(sw_name, function(x) dplyr::filter(data, SW == x))
sw_min <- unlist(lapply(1:length(subset), function(x) min(subset[x][[1]][,y])))
subset_min <- data.frame()
for(i in 1:length(sw_name)){
filter_criteria <- interp(~y == x, .values=list(y=as.name(y), x=sw_min[i]))
s <- data %>% filter(SW == sw_name[i]) %>% filter_(filter_criteria)
if(nrow(s) > 1){ # in case there are duplicate rows
s <- s %>% distinct(SW, paste(y), .keep_all = TRUE)
s <- s[,-length(s)] # discard the generated new column
}
subset_min <- bind_rows(subset_min, s)
}
return(subset_min)
}
g2_L17B <- get_subset(g2_extract, "L17B")
g2_L17A <- get_subset(g2_extract, "L17A")
load("~/Dropbox/Thesis/Data/data.RData")
library(MSwM2)
library(MSwM2)
library(MSwM2)
library(MSwM2)
library(MSwM2)
