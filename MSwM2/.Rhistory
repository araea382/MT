state <- factor(pred_L16A)
state <- c(state, NA)
index=seq(1,nrow(test_g2_L16A))
xmin=index-0.5
xmax=index+0.5
y=test_g2_L16A$TotCpu
ymin=ifelse(unique(state_L16A_3$ymin) > min(y), min(y), unique(state_L16A_3$ymin))
ymax=ifelse(unique(state_L16A_3$ymax) > max(y), unique(state_L16A_3$ymax), max(y))
n=nrow(test_g2_L16A)
ans <- data.frame(index,xmin,xmax,state=factor(state),y=y,ymin=rep(ymin,n),ymax=rep(ymax,n))
ggplot(data=ans, aes(x=index, y=y)) + geom_line() +
geom_rect(data=ans, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=state), alpha=0.2, inherit.aes=FALSE) +
scale_fill_manual(values=c("red","green","blue")) +
ylab("TotCpu") + ggtitle("L16A") + theme_bw()
state_L16B_3 <- gen(mswm_L16B_NYY, train_g2_L16B)
ggplot(data=state_L16B_3, aes(x=index, y=y)) + geom_line() +
geom_rect(data=state_L16B_3, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=state), alpha=0.2, inherit.aes=FALSE) +
scale_fill_manual(values=c("red","green","blue")) +
ylab("TotCpu") + ggtitle("L16B_NYY") + theme_bw()
state_L16A_3 <- gen(mswm_L16A_NN, train_g2_L16A)
ggplot(data=state_L16A_3, aes(x=index, y=y)) + geom_line() +
geom_rect(data=state_L16A_3, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=state), alpha=0.2, inherit.aes=FALSE) +
scale_fill_manual(values=c("red","green","blue")) +
ylab("TotCpu") + ggtitle("L16A_NN") + theme_bw()
state_L17A_3 <- gen(mswm_L17A_NNN, train_g2_L17A)
ggplot(data=state_L17A_3, aes(x=index, y=y)) + geom_line() +
geom_rect(data=state_L17A_3, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=state), alpha=0.2, inherit.aes=FALSE) +
scale_fill_manual(values=c("red","green","blue")) +
ylab("TotCpu") + ggtitle("L17A_NNN") + theme_bw()
L16B_3 <- as.data.frame(mswm_L16B_3@Fit@smoProb)
L16B_3 <- cbind(index=seq(1,nrow(L16B_3)),L16B_3)
colnames(L16B_3) <- c("index","State 1","State 2","State 3")
L16B_3 <- melt(L16B_3, id="index")
ggplot(data=L16B_3, aes(x=index, y=value, colour=variable)) + geom_line() +
ylab("Smoothed Probabilities") + ggtitle("L16B") + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
theme_bw() + theme(legend.title = element_blank())
L16B_2 <- as.data.frame(mswm_L16B_2@Fit@smoProb)
L16B_2 <- cbind(index=seq(1,nrow(L16B_2)),L16B_2)
colnames(L16B_2) <- c("index","State 1","State 2")
L16B_2 <- melt(L16B_2, id="index")
ggplot(data=L16B_2, aes(x=index, y=value, colour=variable)) + geom_line() +
ylab("Smoothed Probabilities") + ggtitle("L16B") + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
theme_bw() + theme(legend.title = element_blank())
L16A_3 <- as.data.frame(mswm_L16A_3@Fit@smoProb)
L16A_3 <- cbind(index=seq(1,nrow(L16A_3)),L16A_3)
colnames(L16A_3) <- c("index","State 1","State 2","State 3")
L16A_3 <- melt(L16A_3, id="index")
ggplot(data=L16A_3, aes(x=index, y=value, colour=variable)) + geom_line() +
ylab("Smoothed Probabilities") + ggtitle("L16A") + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
theme_bw() + theme(legend.title = element_blank())
#--------------------------------#
# smoothed prob plot
L16A_2 <- as.data.frame(mswm_L16A_2@Fit@smoProb)
L16A_2 <- cbind(index=seq(1,nrow(L16A_2)),L16A_2)
colnames(L16A_2) <- c("index","State 1","State 2")
L16A_2 <- melt(L16A_2, id="index")
ggplot(data=L16A_2, aes(x=index, y=value, colour=variable)) + geom_line() +
ylab("Smoothed Probabilities") + ggtitle("L16A") + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
theme_bw() + theme(legend.title = element_blank())
L17A_3 <- as.data.frame(mswm_L17A_3@Fit@smoProb)
L17A_3 <- cbind(index=seq(1,nrow(L17A_3)),L17A_3)
colnames(L17A_3) <- c("index","State 1","State 2","State 3")
L17A_3 <- melt(L17A_3, id="index")
ggplot(data=L17A_3, aes(x=index, y=value, colour=variable)) + geom_line() +
ylab("Smoothed Probabilities") + ggtitle("L17A") + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
theme_bw() + theme(legend.title = element_blank())
L17A_2 <- as.data.frame(mswm_L17A_2@Fit@smoProb)
L17A_2 <- cbind(index=seq(1,nrow(L17A_2)),L17A_2)
colnames(L17A_2) <- c("index","State 1","State 2")
L17A_2 <- melt(L17A_2, id="index")
ggplot(data=L17A_2, aes(x=index, y=value, colour=variable)) + geom_line() +
ylab("Smoothed Probabilities") + ggtitle("L17A") + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
theme_bw() + theme(legend.title = element_blank())
load("~/Dropbox/Thesis/Data/results.RData")
L16B_3 <- as.data.frame(mswm_L16B_3@Fit@smoProb)
L16B_3 <- cbind(index=seq(1,nrow(L16B_3)),L16B_3)
colnames(L16B_3) <- c("index","State 1","State 2","State 3")
L16B_3 <- melt(L16B_3, id="index")
ggplot(data=L16B_3, aes(x=index, y=value, colour=variable)) + geom_line() +
ylab("Smoothed Probabilities") + ggtitle("L16B") + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
theme_bw() + theme(legend.title = element_blank())
L16B_2 <- as.data.frame(mswm_L16B_2@Fit@smoProb)
L16B_2 <- cbind(index=seq(1,nrow(L16B_2)),L16B_2)
colnames(L16B_2) <- c("index","State 1","State 2")
L16B_2 <- melt(L16B_2, id="index")
ggplot(data=L16B_2, aes(x=index, y=value, colour=variable)) + geom_line() +
ylab("Smoothed Probabilities") + ggtitle("L16B") + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
theme_bw() + theme(legend.title = element_blank())
# smoothed prob plot
L16A_3 <- as.data.frame(mswm_L16A_3@Fit@smoProb)
L16A_3 <- cbind(index=seq(1,nrow(L16A_3)),L16A_3)
colnames(L16A_3) <- c("index","State 1","State 2","State 3")
L16A_3 <- melt(L16A_3, id="index")
ggplot(data=L16A_3, aes(x=index, y=value, colour=variable)) + geom_line() +
ylab("Smoothed Probabilities") + ggtitle("L16A") + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
theme_bw() + theme(legend.title = element_blank())
# smoothed prob plot
L16A_2 <- as.data.frame(mswm_L16A_2@Fit@smoProb)
L16A_2 <- cbind(index=seq(1,nrow(L16A_2)),L16A_2)
colnames(L16A_2) <- c("index","State 1","State 2")
L16A_2 <- melt(L16A_2, id="index")
ggplot(data=L16A_2, aes(x=index, y=value, colour=variable)) + geom_line() +
ylab("Smoothed Probabilities") + ggtitle("L16A") + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
theme_bw() + theme(legend.title = element_blank())
L17A_3 <- as.data.frame(mswm_L17A_3@Fit@smoProb)
L17A_3 <- cbind(index=seq(1,nrow(L17A_3)),L17A_3)
colnames(L17A_3) <- c("index","State 1","State 2","State 3")
L17A_3 <- melt(L17A_3, id="index")
ggplot(data=L17A_3, aes(x=index, y=value, colour=variable)) + geom_line() +
ylab("Smoothed Probabilities") + ggtitle("L17A") + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
theme_bw() + theme(legend.title = element_blank())
L17A_2 <- as.data.frame(mswm_L17A_2@Fit@smoProb)
L17A_2 <- cbind(index=seq(1,nrow(L17A_2)),L17A_2)
colnames(L17A_2) <- c("index","State 1","State 2")
L17A_2 <- melt(L17A_2, id="index")
ggplot(data=L17A_2, aes(x=index, y=value, colour=variable)) + geom_line() +
ylab("Smoothed Probabilities") + ggtitle("L17A") + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
theme_bw() + theme(legend.title = element_blank())
library(ecp)
set.seed(1)
Ediv_L16B <- e.divisive(matrix(train_g2_L16B$TotCpu), R=499, min.size=5)
Ediv_L16B$k.hat
Ediv_L16B$estimates
out <- Ediv_L16B$estimates[c(-1,-length(Ediv_L16B$estimates))]
dat <- data.frame(index=seq(1,nrow(train_g2_L16B)), TotCpu=train_g2_L16B$TotCpu)
ggplot(data=dat, aes(x=index, y=TotCpu)) + geom_line() + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
geom_vline(xintercept=out, colour="red", linetype="longdash") +
ggtitle("E-divisive L16B") + theme_bw()
Ediv_L16A <- e.divisive(matrix(train_g2_L16A$TotCpu), R=499, min.size=5)
Ediv_L16A$k.hat
Ediv_L16A$estimates
out <- Ediv_L16A$estimates[c(-1,-length(Ediv_L16A$estimates))]
dat <- data.frame(index=seq(1,nrow(train_g2_L16A)), TotCpu=train_g2_L16A$TotCpu)
ggplot(data=dat, aes(x=index, y=TotCpu)) + geom_line() +
geom_vline(xintercept=out, colour="red", linetype="dashed") +
ggtitle("E-divisive L16A") + theme_bw()
###############
set.seed(1)
Ediv_L17A <- e.divisive(matrix(train_g2_L17A$TotCpu), R=499, min.size=5)
Ediv_L17A$k.hat
Ediv_L17A$estimates
out <- Ediv_L17A$estimates[c(-1,-length(Ediv_L17A$estimates))]
dat <- data.frame(index=seq(1,nrow(train_g2_L17A)), TotCpu=train_g2_L17A$TotCpu)
ggplot(data=dat, aes(x=index, y=TotCpu)) + geom_line() +
geom_vline(xintercept=out, colour="red", linetype="dashed") +
ggtitle("E-divisive L17A") + theme_bw()
ecp_L16B <- c(130,135,153,170)
L16B_3 <- as.data.frame(mswm_L16B_NYY@Fit@smoProb)
L16B_3 <- cbind(index=seq(1,nrow(L16B_3)),L16B_3)
colnames(L16B_3) <- c("index","State 1","State 2","State 3")
L16B_3 <- melt(L16B_3, id="index")
g <- ggplot(data=L16B_3, aes(x=index, y=value, colour=variable)) + geom_line() +
ylab("Smoothed Probabilities") + ggtitle("L16B_NYY") + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
theme_bw() + theme(legend.title = element_blank())
g + geom_vline(xintercept=ecp_L16B, color="black", size=0.6, linetype="longdash")
load("~/Dropbox/Thesis/Data/results_switch.RData")
ecp_L16B <- c(130,135,153,170)
L16B_3 <- as.data.frame(mswm_L16B_NYY@Fit@smoProb)
L16B_3 <- cbind(index=seq(1,nrow(L16B_3)),L16B_3)
colnames(L16B_3) <- c("index","State 1","State 2","State 3")
L16B_3 <- melt(L16B_3, id="index")
g <- ggplot(data=L16B_3, aes(x=index, y=value, colour=variable)) + geom_line() +
ylab("Smoothed Probabilities") + ggtitle("L16B_NYY") + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
theme_bw() + theme(legend.title = element_blank())
g + geom_vline(xintercept=ecp_L16B, color="black", size=0.6, linetype="longdash")
ecp_L17A <- c(9,77,82,105)
L17A_3 <- as.data.frame(mswm_L17A_NNN@Fit@smoProb)
L17A_3 <- cbind(index=seq(1,nrow(L17A_3)),L17A_3)
colnames(L17A_3) <- c("index","State 1","State 2","State 3")
L17A_3 <- melt(L17A_3, id="index")
g <- ggplot(data=L17A_3, aes(x=index, y=value, colour=variable)) + geom_line() +
ylab("Smoothed Probabilities") + ggtitle("L17A_NNN") + scale_color_manual(values=c("#F8766D","#00BA38","#619CFF")) +
theme_bw() + theme(legend.title = element_blank())
g + geom_vline(xintercept=ecp_L17A, color="black", size=0.6, linetype="longdash")
pred_L16A <- MSwM2::statePredict(mswm_L16A_NN, test_g2_L16A) ##FIX
state_L16A_3 <- gen(mswm_L16A_NN, train_g2_L16A)
state <- factor(pred_L16A)
state <- c(state, NA)
index=seq(1,nrow(test_g2_L16A))
xmin=index-0.5
xmax=index+0.5
y=test_g2_L16A$TotCpu
ymin=ifelse(unique(state_L16A_3$ymin) > min(y), min(y), unique(state_L16A_3$ymin))
ymax=ifelse(unique(state_L16A_3$ymax) > max(y), unique(state_L16A_3$ymax), max(y))
n=nrow(test_g2_L16A)
ans <- data.frame(index,xmin,xmax,state=factor(state),y=y,ymin=rep(ymin,n),ymax=rep(ymax,n))
ggplot(data=ans, aes(x=index, y=y)) + geom_line() +
geom_rect(data=ans, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=state), alpha=0.2, inherit.aes=FALSE) +
scale_fill_manual(values=c("red","green","blue")) +
ylab("TotCpu") + ggtitle("L16A") + theme_bw()
pred_L16B <- MSwM2::statePredict(mswm_L16B_NYY, test_g2_L16B)
# 1  1  1  1  1  3  1  3  3  3  1  3  3  3  2  3  3  3  3  3  3  3  1  3  1
# plot with state area
gen <- function(object,data){
state <- sapply(1:nrow(data), function(x) which.max(object@Fit@smoProb[x,]))
state <- factor(state)
index=seq(1,nrow(data))
xmin=index-0.5
xmax=index+0.5
y=data$TotCpu
ans <- data.frame(index,xmin,xmax,state,y=y,ymin=min(y),ymax=max(y))
return(ans)
}
gen2 <- function(x,dat,data){
state <- factor(x)
index=seq(1,nrow(data))
xmin=index-0.5
xmax=index+0.5
y=data$TotCpu
ymin=ifelse(unique(dat$ymin) > min(y), min(y), unique(dat$ymin))
ymax=ifelse(unique(dat$ymax) > max(y), unique(dat$ymax), max(y))
n=nrow(data)
ans <- data.frame(index,xmin,xmax,state,y=y,ymin=rep(ymin,n),ymax=rep(ymax,n))
return(ans)
}
state_L16B_3 <- gen(mswm_L16B_NYY, train_g2_L16B)
state_test_L16B <- gen2(pred_L16B, state_L16B_3, test_g2_L16B)
ggplot(data=state_test_L16B, aes(x=index, y=y)) + geom_line() +
geom_rect(data=state_test_L16B, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=state), alpha=0.2, inherit.aes=FALSE) +
scale_fill_manual(values=c("red","green","blue")) +
ylab("TotCpu") + ggtitle("L16B") + theme_bw()
pred_L17A <- MSwM2::statePredict(mswm_L17A_NNN, test_g2_L17A)
# 1  1  1  2  1  3  2  3  3  2  2  2  2  2  2
state_L17A_3 <- gen(mswm_L17A_NNN, train_g2_L17A)
state_test_L17A <- gen2(pred_L17A, state_L17A_3, test_g2_L17A)
ggplot(data=state_test_L17A, aes(x=index, y=y)) + geom_line() +
geom_rect(data=state_test_L17A, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=state), alpha=0.2, inherit.aes=FALSE) +
scale_fill_manual(values=c("red","green","blue")) +
ylab("TotCpu") + ggtitle("L17A") + theme_bw()
set.seed(1)
mswm_L17A_4 <- MSwM2::msmFit(mod_L17A, k=4, p=1, sw=rep(TRUE,length(mod_L17A$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
mswm_L17A_4
set.seed(1)
mswm_L16A_4 <- MSwM2::msmFit(mod_L16A, k=4, p=1, sw=rep(TRUE,length(mod_L16A$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
set.seed(1)
mswm_L16B_4 <- MSwM2::msmFit(mod_L16B, k=4, p=1, sw=rep(TRUE,length(mod_L16B$coefficients)+1+1), control=list(trace=TRUE, maxiter=500, parallel=FALSE))
mswm_L16B_4
load("~/Dropbox/Thesis/Data/results.RData")
library(MSwM2)
library(ggplot2)
set.seed(1)
n <- 500
x1 <- runif(n,50,200)
x2 <- runif(n,0,50)
e1 <- rnorm(n,0,1)
e2 <- rnorm(n,2,0.5)
e3 <- rnorm(n,1,1)
y0 <- 0
y1 <- 10 + 0.6*x1 - 0.9*x2 + e1
y0 <- c(0,y1[-n])
y1 <- y1 + 0.5*y0
y2 <- 2 + 0.8*x1 + e2
y0 <- c(0,y2[-n])
y2 <- y2 + 0.2*y0
y3 <- -12 + 0.7*x1 + 0.2*x2 + e3
y0 <- c(0,y3[-n])
y3 <- y3 - 0.2*y0
plot(y1, type="l", ylim=c(0,300)) # normal
points(y2, type="l", col="red") # bad
points(y3, type="l", col="orange") # good
state <- rep(0,n)
ind_normal <- c(1:50,71:110,161:220,351:370,421:450)
ind_bad <- c(51:70,241:290,371:420,451:491)
ind_good <- c(111:160, 221:240,291:350,491:500)
state[ind_normal] <- "Normal"
state[ind_bad] <- "Bad"
state[ind_good] <- "Good"
y <- rep(0,n)
y[ind_normal] <- y1[ind_normal]
y[ind_bad] <- y2[ind_bad]
y[ind_good] <- y3[ind_good]
points(y, type="l", col="green")
plot(y, type="l")
ggplot(data.frame(index=seq(1:n),y), aes(x=index, y=y)) + geom_line() +
ggtitle("Simulated data")+ theme_bw()
simu_data <- data.frame(x1,x2,y)
ind <- 500*0.8
train <- simu_data[1:ind,]
test <- simu_data[-c(1:ind),]
mod <- lm(y~., data=train)
summary(mod)
set.seed(1)
mswm <- MSwM2::msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1),control=list(trace=TRUE,maxiter=500,parallel=FALSE))
summary(mswm)
plotProb(mswm)
# regime1 = bad
# regime2 = normal
# regime3 = good
pred <- MSwM2::statePredict(mswm,test)
test_state <- state[-c(1:ind)]
test_state[which(test_state == "Bad")] <- 1
test_state[which(test_state == "Normal")] <- 2
test_state[which(test_state == "Good")] <- 3
tab <- table(actual=test_state, predict=pred)
sum(diag(tab))/sum(tab) # overall accuracy
1-sum(diag(tab))/sum(tab) # incorrect classification
library(caret)
result <- confusionMatrix(test_state, pred)
# plot state
# X_normal <- rep(NA,n)
# X_good <- rep(NA,n)
# X_bad <- rep(NA,n)
# X_normal[ind_normal] <- ind_normal
# X_good[ind_good] <- ind_good
# X_bad[ind_bad] <- ind_bad
Y <- as.factor(state)
Y <- factor(Y,levels(Y)[c(2,3,1)])
# temp <- data.frame(Y,X_normal,X_good,X_bad)
# ggplot() + geom_point(data=temp, aes(x=X_normal, y=Y)) +
#   geom_point(data=temp, aes(x=X_good, y=Y)) +
#   geom_point(data=temp, aes(x=X_bad, y=Y)) +
#   xlab("index") + ylab("") + labs(y="") + theme_bw()
p1<-ggplot(data.frame(index=seq(1:n),y), aes(x=index, y=y)) + geom_line() +
ggtitle("Dataset 1")+ theme_bw()
p2<-ggplot() + geom_bar(data=temp2, aes(x=X, y=Y, fill=Y, color=Y),stat="identity") +
xlab("index") + ylab("") + theme_bw() +
theme(legend.title = element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_text(colour="white",size=5),
legend.position="bottom") +
ggtitle("State of the the Dataset 1")
require(gridExtra)
grid.arrange(p1,p2,nrow=2)
temp2 <- data.frame(Y,X=seq(1:500))
ggplot() + geom_point(data=temp2, aes(x=X, y=Y, colour=Y)) +
xlab("index") + ylab("") + theme_bw() +
theme(legend.title = element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) +
ggtitle("State of the simulated data") +
scale_colour_manual(values=cbPalette)
p1<-ggplot(data.frame(index=seq(1:n),y), aes(x=index, y=y)) + geom_line() +
ggtitle("Dataset 1")+ theme_bw()
p2<-ggplot() + geom_bar(data=temp2, aes(x=X, y=Y, fill=Y, color=Y),stat="identity") +
xlab("index") + ylab("") + theme_bw() +
theme(legend.title = element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_text(colour="white",size=5),
legend.position="bottom") +
ggtitle("State of the the Dataset 1")
require(gridExtra)
grid.arrange(p1,p2,nrow=2)
p1<-ggplot(data.frame(index=seq(1:n),y), aes(x=index, y=y)) + geom_line() +
ggtitle("Dataset 1")+ theme_bw()
p2<-ggplot() + geom_bar(data=temp2, aes(x=X, y=Y, fill=Y, color=Y),stat="identity") +
xlab("index") + ylab("") + theme_bw() +
theme(legend.title = element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_text(colour="white",size=5),
legend.position="bottom") +
ggtitle("State of the the Dataset 1")
require(gridExtra)
grid.arrange(p1,p2,nrow=2)
p1<-ggplot(data.frame(index=seq(1:n),y), aes(x=index, y=y)) + geom_line() +
ggtitle("Simulated Dataset 1")+ theme_bw()
p2<-ggplot() + geom_bar(data=temp2, aes(x=X, y=Y, fill=Y, color=Y),stat="identity") +
xlab("index") + ylab("") + theme_bw() +
theme(legend.title = element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_text(colour="white",size=5),
legend.position="bottom") +
ggtitle("State of the the Dataset 1")
require(gridExtra)
grid.arrange(p1,p2,nrow=2)
set.seed(1)
samp <- sample(3,500,replace=TRUE)
ind_normal <- which(samp == 1); length(ind_normal)
ind_bad <- which(samp == 2); length(ind_bad)
ind_good <- which(samp == 3); length(ind_good)
state[ind_normal] <- "Normal"
state[ind_bad] <- "Bad"
state[ind_good] <- "Good"
y <- rep(0,n)
y[ind_normal] <- y1[ind_normal]
y[ind_bad] <- y2[ind_bad]
y[ind_good] <- y3[ind_good]
points(y, type="l", col="green")
plot(y, type="l")
ggplot(data.frame(index=seq(1:n),y), aes(x=index, y=y)) + geom_line() +
ggtitle("Simulated data")+ theme_bw()
simu_data <- data.frame(x1,x2,y)
ind <- 500*0.8
train <- simu_data[1:ind,]
test <- simu_data[-c(1:ind),]
mod <- lm(y~., data=train)
summary(mod)
set.seed(1)
mswm2 <- MSwM2::msmFit(mod, k=3, p=1, sw=rep(TRUE,length(mod$coefficients)+1+1),control=list(trace=TRUE,maxiter=500,parallel=FALSE))
summary(mswm2)
plotProb(mswm2)
# regime1 = bad
# regime2 = good
# regime3 = normal
pred_train_state <- apply(mswm2@Fit@smoProb,1,which.max)
st <- samp[1:ind]
st[which(st == 1)] <- 4
st[which(st == 3)] <- 1
st[which(st == 4)] <- 2
pred <- MSwM2::statePredict(mswm2,test)
test_state <- state[-c(1:ind)]
test_state[which(test_state == "Bad")] <- 1
test_state[which(test_state == "Normal")] <- 3
test_state[which(test_state == "Good")] <- 2
tab <- table(actual=test_state, predict=pred)
sum(diag(tab))/sum(tab) # overall accuracy
1-sum(diag(tab))/sum(tab) # incorrect classification
library(caret)
result <- confusionMatrix(test_state, pred)
Y <- as.factor(state)
Y <- factor(Y,levels(Y)[c(2,3,1)])
temp2 <- data.frame(Y,X=seq(1:500))
# plot(x=seq(1,500),y=samp, type="h")
p1 <- ggplot(data.frame(index=seq(1:n),y), aes(x=index, y=y)) + geom_line() +
ggtitle("Dataset 2")+ theme_bw()
p2 <- ggplot() + geom_bar(data=temp2, aes(x=X, y=Y, fill=Y, color=Y),stat="identity") +
xlab("index") + ylab("") + theme_bw() +
theme(legend.title = element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_text(colour="white",size=5),
legend.position="bottom") +
ggtitle("State of the Dataset 2")
grid.arrange(p1,p2,nrow=2)
temp2 <- data.frame(Y,X=seq(1:500))
p1 <- ggplot(data.frame(index=seq(1:n),y), aes(x=index, y=y)) + geom_line() +
ggtitle("Simulated Dataset 2")+ theme_bw()
p2 <- ggplot() + geom_bar(data=temp2, aes(x=X, y=Y, fill=Y, color=Y),stat="identity") +
xlab("index") + ylab("") + theme_bw() +
theme(legend.title = element_blank(),
axis.ticks.y=element_blank(),
axis.text.y=element_text(colour="white",size=5),
legend.position="bottom") +
ggtitle("State of the Dataset 2")
grid.arrange(p1,p2,nrow=2)
library(MSwM2)
?plotReg
?MSwM
data(energy)
model=lm(Price~Oil+Gas+Coal+EurDol+Ibex35+Demand,energy)
mod=MSwM2::msmFit(model,k=2,sw=rep(TRUE,8))
summary(mod)
plotReg(mod)
library(MSwM2)
library(MSwM2)
load("~/Thesis/Data/data.RData")
mod_L16B <- lm(fmla, data=train_g2_L16B)
summary(mod_L16B)
switch <- rep(TRUE,length(mod_L16B$coefficients)+1+1)
names(switch) <- c(names(mod_L16B$coefficients),"AR","var")
switch[c(5:10)] <- FALSE; switch
set.seed(1)
mswm_L16B_NNN <- MSwM2::msmFit(mod_L16B, k=3, p=1, sw=switch, control=list(trace=TRUE, maxiter=1000, parallel=FALSE))
plotSmo(mswm_L16B_NNN)
plotSmo(mswm_L16B_NNN)
plotDiag(mswm_L16B_NNN)
object <- mswm_L16B_NNN
model <- object["model"]
p <- object@p
require(ggplot2)
state <- apply(object@Fit@smoProb,1,which.max)
state <- factor(state)
index <- seq(1,length(state))
xmin <- index - 0.5
xmax <- index + 0.5
y <- model$model[,1]
if(p > 0){
y_ar <- model$model[,ncol(model$model)][1:p]
y <- c(y_ar, y)
}
temp <- data.frame(index, xmin, xmax, state, y=y, ymin=min(y), ymax=max(y))
ggplot(data=temp, aes(x=index, y=y)) + geom_line() +
geom_rect(data=temp, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=state), alpha=0.2, inherit.aes=FALSE) +
scale_fill_manual(values=c("red","green","blue")) +
ylab(paste(colnames(object@model$model)[1])) + theme_bw()
return(invisible())
ggplot(data=temp, aes(x=index, y=y)) + geom_line() +
geom_rect(data=temp, aes(xmin=xmin, xmax=xmax, ymin=ymin, ymax=ymax, fill=state), alpha=0.2, inherit.aes=FALSE) +
ylab(paste(colnames(object@model$model)[1])) + theme_bw()
library(MSwM2)
plotSmo(mswm_L16B_NNN)
library(MSwM2)
plotSmo(mswm_L16B_NNN)
data(example)
model=lm(y~x,example)
summary(model)
set.seed(1)
mod.mswm2=MSwM2::msmFit(model,k=2,p=1,sw=c(T,T,T,T),control=list(trace=F,parallel=F))
plotSmo(mod.mswm2)
paste(1:k, collapse= "+")
k=3
paste(1:k, collapse= "+")
paste("state",1:k)
library(MSwM2)
load("~/Thesis/Data/data.RData")
library(MSwM2)
data(example)
model=lm(y~x,example)
summary(model)
set.seed(1)
mod.mswm2=MSwM2::msmFit(model,k=2,p=1,sw=c(T,T,T,T),control=list(trace=F,parallel=F))
plotSmo(mod.mswm2)
plotArea(mod.m)
plotArea(mod.mswm2)
library(MSwM2)
data(example)
model=lm(y~x,example)
set.seed(1)
mod.mswm2=MSwM2::msmFit(model,k=2,p=1,sw=c(T,T,T,T),control=list(trace=F,parallel=F))
plotArea(mod.mswm2)
plotSmo(mod.mswm2)
library(MSwM2)
?plotArea
library(MSwM2)
